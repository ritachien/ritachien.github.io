<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>開始寫部落格啦!</title>
    <url>/posts/572b724a/</url>
    <content><![CDATA[<p>看了很多轉職分享、技術部落格、Youtube影片…等，有一個對程式新手共通的建議就是:「寫部落格」。<br>寫部落格的好處有什麼呢?  </p>
<span id="more"></span>
<p><strong>1. 學習筆記 :</strong><br>  學習的路很長，難免會把學過的東西忘掉。所以把自己曾經遇到的問題、解決過程及方法記錄下來，可以當作之後重新複習的依據。<br><strong>2. 知識再消化 :</strong><br>  把東西背下來很簡單，但要說給別人聽就相對困難。需要先消化、重新整理，再依照別人能懂的方式表達出來，需要一個知識再咀嚼的過程。這對新學到的知識可以有更深入的理解，或是會在跟別人的交流中找到自己忽略的小問題。<br><strong>3. 和別人交流的空間 :</strong><br>  也許會找到跟我相同興趣或遇到相同問題的人，可以超脫地理限制，跟世界各地的人交流。<br><strong>4. 求職參考 :</strong><br>  畢竟我不是本科出身的，在學歷上比不過相關科系的競爭對手。在經歷尚未累積出來之前，至少可以讓人資對我有更多的了解。包含我學過的知識、遇到過的問題，最重要的是我面對問題的解決態度及方法。  </p>
<p>既然開始了，希望能一直寫下去，也希望最終有一天，這個部落格也能成為其他人遇到問題的參考依據!</p>
]]></content>
      <categories>
        <category>個人隨筆</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 運算子</title>
    <url>/posts/d403fec1/</url>
    <content><![CDATA[<p>在使用運算子 (Operators) 時，隨著練習題逐漸提高的複雜度，開始發現一些與自己認知不同的地方。這些不明顯的小錯誤，常常是導致程式跑不出來或出現預期外結果的原因。所以在之前筆記的基礎上，把犯過的錯誤一起整理進來，降低下次再犯的可能性。</p>
<span id="more"></span>
<blockquote>
<p>筆記內容為學習過程中的紀錄，內容可能未臻完善，內文可能也會隨著學習過程作增減或修改。<br>如有錯漏，歡迎留言，謝謝!  </p>
</blockquote>
<h2 id="算術運算子"><a href="#算術運算子" class="headerlink" title="算術運算子"></a>算術運算子</h2><h3 id="基本介紹"><a href="#基本介紹" class="headerlink" title="基本介紹"></a>基本介紹</h3><p>算術運算子（arithmetic operators）: 四則運算會用到的運算子，負責將變數進行加、減、乘、除。  </p>
<table>
<thead>
<tr>
<th align="center">運算子</th>
<th align="center">功能</th>
<th>範例</th>
<th align="center">結果</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加</td>
<td>1 + 2</td>
<td align="center">3</td>
<td>也可以用來連接字串</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">減</td>
<td>4 - 3</td>
<td align="center">1</td>
<td></td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘</td>
<td>2 * 4</td>
<td align="center">8</td>
<td></td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center">除</td>
<td>9 &#x2F; 3</td>
<td align="center">3</td>
<td></td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">指數</td>
<td>3 ** 2<br>9 ** (1&#x2F;2)</td>
<td align="center">9<br>3</td>
<td>計算 a 的 b 次方</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取餘數</td>
<td>7 &#x2F; 2</td>
<td align="center">1</td>
<td>7 除以 2 結果：商等於 3，餘數等於 1</td>
</tr>
<tr>
<td align="center">++</td>
<td align="center">將值增加 1</td>
<td>x &#x3D; 2<br>x++</td>
<td align="center">3</td>
<td>同 x &#x3D; x + 1，將 x 原本的值 2 再加 1。</td>
</tr>
<tr>
<td align="center">–</td>
<td align="center">將值減少 1</td>
<td>x &#x3D; 5<br>x–</td>
<td align="center">4</td>
<td>同 x &#x3D; x - 1，將 x 原本的值 5 再減 1。</td>
</tr>
</tbody></table>
<h3 id="寫在前面的-和"><a href="#寫在前面的-和" class="headerlink" title="寫在前面的 ++ 和 --"></a>寫在前面的 <code>++</code> 和 <code>--</code></h3><p><code>++</code> 和 <code>--</code> 寫在變數的前面或後面作用都是不變的，即「將變數的值再加 1 或再減 1」。但是如果放進 console.log() 裡，執行的順序會不一樣。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">2</span>            <span class="comment">// 宣告並指派 2 的值給 x</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)       <span class="comment">// 會印出 2</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x++)     <span class="comment">// 會印出 2 (先印出 x ，然後才加 1)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)       <span class="comment">// 會印出 3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++x)     <span class="comment">// 會印出 4 (先加 1 ，然後才印出 x)</span></span><br></pre></td></tr></table></figure>
<h3 id="常見錯誤-型別錯誤"><a href="#常見錯誤-型別錯誤" class="headerlink" title="常見錯誤: 型別錯誤"></a>常見錯誤: 型別錯誤</h3><p>JavaScript 是一個弱型別的語言，意思是說在 JavaScript 裡，型別特別容易自動轉換。進行運算時，如果變數型別不同，有時候 JavaScript 不會報錯，而是直接自動轉換型別，這也很容易造成「出現預期外結果卻很難找出原因」。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;2&#x27;</span>           <span class="comment">// 型別: string</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>             <span class="comment">// 型別: number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a + b)    <span class="comment">// 會印出 23 (自動將 b 型別轉換為 string )</span></span><br></pre></td></tr></table></figure>

<h2 id="賦值運算子"><a href="#賦值運算子" class="headerlink" title="賦值運算子"></a>賦值運算子</h2><h3 id="基本介紹-1"><a href="#基本介紹-1" class="headerlink" title="基本介紹"></a>基本介紹</h3><p>賦值運算子（assignment operators）中最常使用的賦值運算子就是 <code>=</code> ，除了 <code>=</code> 外還有搭配算數運算的其他賦值運算子。  </p>
<table>
<thead>
<tr>
<th align="center">運算子</th>
<th>範例</th>
<th align="center">結果</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;</td>
<td>x &#x3D; 5<br>y &#x3D; 2</td>
<td align="center">x &#x3D; 5<br>y &#x3D; 2</td>
<td>將值 5 賦值給 x<br>將值 2 賦值給 y</td>
</tr>
<tr>
<td align="center">+&#x3D;</td>
<td>x +&#x3D; y</td>
<td align="center">x &#x3D; 7</td>
<td>等同 x &#x3D; x + y 的意思</td>
</tr>
<tr>
<td align="center">-&#x3D;</td>
<td>x -&#x3D; y</td>
<td align="center">x &#x3D; 3</td>
<td>等同 x &#x3D; x - y 的意思</td>
</tr>
<tr>
<td align="center">&#x2F;&#x3D;</td>
<td>x &#x2F;&#x3D; y</td>
<td align="center">x &#x3D; 2.5</td>
<td>等同 x &#x3D; x &#x2F; y 的意思</td>
</tr>
<tr>
<td align="center">%&#x3D;</td>
<td>x %&#x3D; y</td>
<td align="center">x &#x3D; 1</td>
<td>等同 x &#x3D; x % y 的意思</td>
</tr>
</tbody></table>
<h2 id="比較運算子"><a href="#比較運算子" class="headerlink" title="比較運算子"></a>比較運算子</h2><h3 id="基本介紹-2"><a href="#基本介紹-2" class="headerlink" title="基本介紹"></a>基本介紹</h3><p>比較運算子（comparison operators）: 在進行條件設定時，很常用到比較運算子，也是容易出現「粗心的錯誤」的地方。  </p>
<table>
<thead>
<tr>
<th align="center">運算子</th>
<th>說明</th>
<th>範例</th>
<th>結果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;&#x3D;</td>
<td>等於 (<strong>不</strong>檢查型別)</td>
<td>1 &#x3D;&#x3D; ‘1’<br>0 &#x3D;&#x3D; ‘’</td>
<td>true<br>true</td>
</tr>
<tr>
<td align="center">&#x3D;&#x3D;&#x3D;</td>
<td>等於 (檢查型別)</td>
<td>1 &#x3D;&#x3D; ‘1’<br>0 &#x3D;&#x3D; ‘’</td>
<td>false<br>false</td>
</tr>
<tr>
<td align="center">!&#x3D;</td>
<td>不等於 (<strong>不</strong>檢查型別)</td>
<td>1 !&#x3D; ‘1’<br>0 !&#x3D; ‘’</td>
<td>false<br>false</td>
</tr>
<tr>
<td align="center">!&#x3D;&#x3D;</td>
<td>不等於 (檢查型別)</td>
<td>1 !&#x3D;&#x3D; ‘1’<br>0 !&#x3D;&#x3D; ‘’</td>
<td>true<br>true</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td>大於(<strong>不</strong>檢查型別)</td>
<td>3 &gt; 1<br>3 &gt; 3<br>1 &gt; 3</td>
<td>true<br>false<br>false</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td>小於(<strong>不</strong>檢查型別)</td>
<td>3 &lt; 1<br>3 &lt; 3<br>1 &lt; 3</td>
<td>false<br>false<br>true</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td>大於等於(<strong>不</strong>檢查型別)</td>
<td>3 &gt;&#x3D; 1<br>3 &gt;&#x3D; 3<br>1 &gt;&#x3D; 3</td>
<td>true<br>true<br>false</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td>小於等於(<strong>不</strong>檢查型別)</td>
<td>3 &lt;&#x3D; 1<br>3 &lt;&#x3D; 3<br>1 &lt;&#x3D; 3</td>
<td>false<br>true<br>true</td>
</tr>
</tbody></table>
<h3 id="常見錯誤1-型別錯誤"><a href="#常見錯誤1-型別錯誤" class="headerlink" title="常見錯誤1: 型別錯誤"></a>常見錯誤1: 型別錯誤</h3><p>除了<strong>等於</strong>和<strong>不等於</strong>可以強制檢查型別，其他的比較運算子都要特別注意<strong>型別轉換</strong>問題。可以用 <code>typeof</code> 來檢查變數的型別。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;2&#x27;</span>             <span class="comment">// 型別: string</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>               <span class="comment">// 型別: number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a &lt; b)      <span class="comment">// 結果為 true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a)   <span class="comment">// 結果為 string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b)   <span class="comment">// 結果為 number</span></span><br></pre></td></tr></table></figure>
<h3 id="常見錯誤2-用錯等於"><a href="#常見錯誤2-用錯等於" class="headerlink" title="常見錯誤2: 用錯等於"></a>常見錯誤2: 用錯等於</h3><p>依照以前學數學的習慣，在做變數比較時，會不小心把 <code>=</code> 當作比較運算子使用。原本要拿來比較的變數不小心被重新賦值了，所以會跑出奇怪的結果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正確 </span></span><br><span class="line"><span class="keyword">if</span>(a === b) &#123;       <span class="comment">// 如果 a 和 b 相等，則進行 (a - b)</span></span><br><span class="line">  a - b             <span class="comment">// 因為 a 和 b 不相等，所以不會執行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a - b)  <span class="comment">// 會印出 1。此時 a 等於3；b 等於2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 錯誤</span></span><br><span class="line"><span class="keyword">if</span>(a = b) &#123;         <span class="comment">// b 的值被指派給 a ，此時 a 等於2</span></span><br><span class="line">  a - b             <span class="comment">// 進行 a - b 運算(2-2)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a - b)  <span class="comment">// 會印出 0。此時 a 和 b 都等於2</span></span><br></pre></td></tr></table></figure>
<h3 id="常見錯誤3-比較變數區間"><a href="#常見錯誤3-比較變數區間" class="headerlink" title="常見錯誤3: 比較變數區間"></a>常見錯誤3: 比較變數區間</h3><p>按照數學邏輯，如果我想知道一個變數的值是否在特定區間裡，可能會把條件這樣寫 <code>3 &lt; x &lt; 10</code> ，然後再丟一個 x 值進行驗證，但是在 JavaScript 裡，這樣做結果會出現異常。  </p>
<p>這樣寫的效果類似 <code>||</code> 的使用， <code>3 &lt; x &lt; 10</code> 會被拆成兩段 (<code>3 &lt; x</code> 和 <code>x &lt; 10</code>) 進行驗證，只要其中一項符合則傳回 true。  </p>
<p>正確方式應該要將條件拆開，並用 <code>&amp;&amp;</code> 要求同時符合。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; x &lt; <span class="number">10</span>)       <span class="comment">// 輸出結果為 true (符合 x &lt; 10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; x &lt; <span class="number">10</span>)       <span class="comment">// 輸出結果為 true (符合 3 &lt; x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x &gt; <span class="number">3</span> &amp;&amp; x &lt; <span class="number">10</span>)  <span class="comment">// 輸出結果為 false</span></span><br></pre></td></tr></table></figure>

<h2 id="邏輯運算子"><a href="#邏輯運算子" class="headerlink" title="邏輯運算子"></a>邏輯運算子</h2><h3 id="基本介紹-3"><a href="#基本介紹-3" class="headerlink" title="基本介紹"></a>基本介紹</h3><p>邏輯運算子（logical operators）: 通常用於條件判斷 <code>true</code> or <code>false</code> 。    </p>
<table>
<thead>
<tr>
<th align="center">運算子</th>
<th>說明</th>
<th>範例</th>
<th>結果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;&amp;</td>
<td>「而且」；前後條件皆相符，則回傳 true</td>
<td>true &amp;&amp; true<br>true &amp;&amp; false<br>false &amp;&amp; false</td>
<td>true<br>false<br>false</td>
</tr>
<tr>
<td align="center">||</td>
<td>「或」；前後條件只要有一邊為 true，則為 true</td>
<td>true || true<br>true || false<br>false || false</td>
<td>true<br>true<br>false</td>
</tr>
<tr>
<td align="center">!</td>
<td>「非」，將後面接的 boolean 轉成相反的值</td>
<td>!true<br>!false</td>
<td>false<br>true</td>
</tr>
</tbody></table>
<h3 id="常見錯誤-運算子順序"><a href="#常見錯誤-運算子順序" class="headerlink" title="常見錯誤: 運算子順序"></a>常見錯誤: 運算子順序</h3><p>就像四則運算有「先乘除後加減」的運算順序一樣，邏輯運算子的運算順序是: <code>&amp;&amp;</code> &gt; <code>||</code> ，且由左至右運行。如果要打破原有順序，加上 <code>()</code> 是很好用的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="literal">false</span> &amp;&amp; <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>)      <span class="comment">// 結果為 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="literal">true</span> || <span class="literal">false</span>) &amp;&amp; (<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>))  <span class="comment">// 結果為 false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript 筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Hexo + Github Pages 建立部落格</title>
    <url>/posts/4b9ba027/</url>
    <content><![CDATA[<p>在建置部落格前猶豫了很久，最終還是決定用 Hexo + Github Pages 當作平台。歷時兩天，終於解決各種莫名其妙的問題，讓它變成心目中的樣子!</p>
<span id="more"></span>


<h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><h3 id="為什麼選擇-Github-Pages"><a href="#為什麼選擇-Github-Pages" class="headerlink" title="為什麼選擇 Github Pages ?"></a>為什麼選擇 Github Pages ?</h3><p><strong>1. 免費</strong><br>  Github Pages 是 Github 提供的免費靜態網頁空間，提供一組 Github帳號 <code>.github.io</code> 子網域。雖然有容量跟流量上的限制，但以一個剛起步的部落格來說，現階段不會有超出的問題。既然有免費的平台那就用吧!  </p>
<p><strong>2. 能夠使用 Git 部署並進行版本控制</strong><br>  看了各個學習寫程式分享，得知「如何使用 Git 進行版本控制」是很重要的。雖然現階段身為程式小白的我沒有太多的概念，也完全沒有接觸過，但在查詢 Hexo 資訊時得知，Hexo 可以藉由 Git 部署到 Github 上。希望能在日常使用中學習並熟悉 Git 。  </p>
<p><strong>3. Github 會記錄每日 commit 次數</strong><br>  Github 的個人首頁會呈現一整年的 commit 紀錄畫面。每天一格，每 commit 一次，當天的格子就會從灰色漸漸往深綠色變化。希望利用自己的收集強迫症，為了盡可能填滿格子，督促自己多多更新部落格。  </p>
<h3 id="Github-Pages-有什麼限制"><a href="#Github-Pages-有什麼限制" class="headerlink" title="Github Pages 有什麼限制?"></a>Github Pages 有什麼限制?</h3><ol>
<li>只能存放靜態網頁。</li>
<li>1GB 空間容量。</li>
<li>100GB 月流量。</li>
<li>1 小時內只能提交 10 次更新版本。<blockquote>
<p>參考資料: <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#limits-on-use-of-github-pages">Github 說明文件</a></p>
</blockquote>
</li>
</ol>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="為什麼選擇-Hexo"><a href="#為什麼選擇-Hexo" class="headerlink" title="為什麼選擇 Hexo ?"></a>為什麼選擇 Hexo ?</h3><p><strong>1. Hexo 支援強大:</strong><br>  Hexo 是台灣人做的(<a href="https://zespia.tw/blog/2012/10/11/hexo-debut/">起源在這裡</a>)，官方中文支援蠻完整的。另外，可能也是因為中文支援較完整，有很多中文圈的前輩做了很多主題可以套用，當遇到相關問題時，Google 到的解決方案也很多。  </p>
<p><strong>2. 使用 Node.js(JavaScript) 開發:</strong><br>  在正式開始前，找了幾個熱門靜態檔案產生器比較，最後在 Hexo 跟 Hugo 之間做選擇。雖然 Hugo 比較快，Github上的星星數也比較多，但基於 Hugo 是用 Go 語言寫的，初學的我還是應該先專心一門語言較好，因此捨棄 Hugo 選擇使用 JavaScript 的 Hexo。既然我現在在學JavaScript，現階段可以研究一下它的寫法，之後說不定哪天我可以自己把它改得更符合自己需求。目前在做一些個人化設定時也發現，因為可以看得懂一點點結構，修改時很有幫助。  </p>
<p><strong>3. 支援 Markdown :</strong><br>Markdown 用來撰寫文章很方便，因為語法簡單，可以更專心在文字內容的編輯上，不用過分關注排版問題。在加上之前跟鳥友一起在HackMD建了個鳥寶寶成長紀錄(<a href="https://hackmd.io/p5O2bt2QQrC1HH46cVfs0A">有興趣可以看看</a>)，對 Markdown 也算比較熟悉了。</p>
<p><strong>4. 個人化設定自由度高 :</strong><br>主題非常多元，版面也可依自己需求做CSS修改。(剛學到的 <code>padding</code> 、 <code>letter-spacing</code> 、 <code>border-radius</code> 等也都依自己喜歡的樣子用上了!) 另外，也可以找到很多其他插件資源，讓自己的部落格更有個人特色。<br>  <br/></p>
<h2 id="開始建置部落格"><a href="#開始建置部落格" class="headerlink" title="開始建置部落格"></a>開始建置部落格</h2><blockquote>
<p>本文撰寫時在 Windows 10 環境下安裝。  </p>
</blockquote>
<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><p><strong>1. 安裝 Node.js</strong>  </p>
<ul>
<li>建置過程中需要用 NPM 安裝套件，所以要先下載 Node.js (<a href="https://nodejs.org/en/">官網下載</a>)。</li>
</ul>
<p><strong>2. 安裝 Git</strong>  </p>
<ul>
<li><p>之後會使用 Git 作版本控制並將 Hexo 部署或備份到 Github 上，所以要先安裝 Git (<a href="https://git-scm.com/downloads">官網下載</a>)。  </p>
</li>
<li><p>開始初次設定 Git : 設定使用者名稱及電子郵件， Git 的提交會使用這些資訊。  </p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引號內填入使用者名稱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"><span class="comment"># 引號內填入使用者email</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>完成後可用 <code>git config --global --list</code> 檢查是否有誤，或是到 <code>C:\Users\yourUserName\.gitconfig</code> 確認並修正。</p>
</li>
</ul>
<p><strong>3. 新建Github Repository</strong>  </p>
<ul>
<li>開啟 Github 並點選 New Repository</li>
<li>Repository 名稱為 <code>用戶名.github.io</code><br>  <img src="/../../Blog-image/posts/2021-12-21_001.webp" alt="20211221-001">    <br/></li>
</ul>
<h3 id="本地端安裝"><a href="#本地端安裝" class="headerlink" title="本地端安裝"></a>本地端安裝</h3><p><strong>1. 安裝 Hexo</strong>  </p>
<ul>
<li>使用 <code>npm install -g hexo-cli</code> 安裝 Hexo 。  </li>
<li>安裝成功後，輸入 <code>hexo version</code> 指令可查看安裝版本。</li>
</ul>
<p><strong>2. Blog 存放資料夾初始化</strong></p>
<ul>
<li>開啟命令提示元(CMD) &gt; 前往想存放 Blog 檔案的本地端資料夾。 (ex. 我要在 D 槽新建 Blog 資料夾存放，所以先輸入 <code>D:</code> 讓當前位置移到 D 槽)  </li>
<li>初始化資料夾(必須是空資料夾，以下方法二選一)  <ul>
<li>方法一(當前位置 D 槽) –在 D 槽新建 Blog 資料夾並初始化  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init Blog</span><br></pre></td></tr></table></figure></li>
<li>方法二(已自行新建資料夾，當前位置 D:\Blog) –將 Blog 資料夾初始化  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>安裝相關套件  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>3. 部署設定</strong></p>
<ul>
<li>安裝部署用套件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>修改部署設定 (檔案 <code>根目錄\_config.yml</code> 最下方 # Deployment)  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/用戶名/用戶名.github.io.git</span>  <span class="comment"># Repository 網址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">分支名稱(可用預設</span> <span class="string">main</span> <span class="string">，或自訂如</span> <span class="string">gh-pages)</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">&quot;填入commit訊息&quot;</span>  <span class="comment"># 本行不用可刪</span></span><br></pre></td></tr></table></figure>
<br/></li>
</ul>
<h3 id="部署到Github-常用指令"><a href="#部署到Github-常用指令" class="headerlink" title="部署到Github (常用指令)"></a>部署到Github (常用指令)</h3><p><strong>1. 本地端預覽</strong><br>使用時機: 當在本地端做完修改後，如果希望看到及時修改結果。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server                <span class="comment"># 開啟本地端預覽(標準用法)</span></span><br><span class="line">hexo s                     <span class="comment"># 開啟本地端預覽(簡短用法)</span></span><br><span class="line">http://localhost:4000      <span class="comment"># 貼入網址列即可預覽</span></span><br><span class="line">Ctrl + C                   <span class="comment"># 結束本地端預覽</span></span><br></pre></td></tr></table></figure>
<p><strong>2. 產生靜態檔案</strong><br>使用時機: 編寫完成後，產生要部署的靜態檔案(會產生 <code>根目錄\public</code> 資料夾放入要部署的檔案)。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate             <span class="comment"># 產生靜態檔案(標準用法)</span></span><br><span class="line">hexo g                    <span class="comment"># 產生靜態檔案(簡短用法)</span></span><br></pre></td></tr></table></figure>
<p><strong>3. 部署</strong><br>使用時機: 編寫完成後，部署到 Github ( <code>根目錄\public</code> 裡的檔案會被上傳到設定好的 Repository)。部署完成就可以在 <code>github.io</code> 看到自己的 Blog 了!  </p>
<blockquote>
<p><font color=#FF6600>Github有時候部署後要等10~20分鐘畫面才會更新</font></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy                  <span class="comment"># 產生靜態檔案(標準用法)</span></span><br><span class="line">hexo d                       <span class="comment"># 產生靜態檔案(簡短用法)</span></span><br><span class="line">https://帳戶名.github.io/     <span class="comment"># 個人部落格網址</span></span><br></pre></td></tr></table></figure>
<p><strong>4. 清除快取 &amp; 靜態檔案</strong><br>使用時機: 為了避免出錯，建議在每次 deploy 前，都先清除先前的資料再重新產生靜態檔案(清除快取檔案 <code>db.json</code> 和已產生的靜態檔案 <code>根目錄\public</code>)。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean     <span class="comment"># 清除快取 &amp; 靜態檔案(標準用法)</span></span><br><span class="line">hexo cl        <span class="comment"># 清除快取 &amp; 靜態檔案(簡短用法)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Alpha Camp 學期一結業心得</title>
    <url>/posts/491e0585/</url>
    <content><![CDATA[<p>Alpha Camp的三週學習進度終於結束了，中間除了充斥著被成就感激起的學習熱情，也飽含怎麼都寫不出來的挫敗感。趁著現在給自己留下一篇熱騰騰的記錄，好好回顧這段學習歷程!  </p>
<span id="more"></span>
<br/>

<h2 id="為什麼會報名Alpha-Camp"><a href="#為什麼會報名Alpha-Camp" class="headerlink" title="為什麼會報名Alpha Camp?"></a>為什麼會報名Alpha Camp?</h2><p>在傳產當了幾年的會計，雖然喜歡這種嚴謹又規整的工作，但是又不甘於這種毫無變化的生活。工作中充斥著各種財務報表的編撰和解讀，與人的交流變得少之又少……又由於公司軟體不給力，很多報表都是Excel刻出來的，為了減少人工輸入造成的錯誤，那段時間研究了函數、VBA，力求做到自動極大化。在查資料過程中發現，把一些固定的語法拼在一起，讓他自動提供結果給我，其實這些東西跟寫程式很像，這也成了我接觸程式語言的契機。  </p>
<p>同時，我也和幾位不同產業的同學&#x2F;前輩聊了聊，發現只要繼續做會計，未來的工作模式也不會有太大的改變。我問了自己:「我能忍受未來20年都過這樣的生活嗎?」 然後我就有了轉職的想法XD  </p>
<p>在嘗試自學後發現，因為完全沒概念，很難為自己規劃一個明確的方向。做了幾天的功課後，毅然決然的刷了卡，趁著沒有太大的經濟負擔時，試著走一條不一樣的路，希望給自己一個不一樣的未來。</p>
<h2 id="三週課程感受"><a href="#三週課程感受" class="headerlink" title="三週課程感受"></a>三週課程感受</h2><p>說實話，比我預期的還要好! 其中對我最有幫助的應該是課程制度的設計，有效的把我在自學時發生的問題都解決了! 其中最有感覺的是以下幾點:</p>
<ol>
<li><p>進度制<br>  非常有效的解決了拖延症的問題。每週有固定進度，但又可以依照自己的時間安排每天學習時間。給了少許進度壓力的同時，又保持了一定的自由度。另外，因為有一批跟自己一樣進度的同學在，討論、互相激勵也很有幫助!</p>
</li>
<li><p>實作練習<br>  學了之後馬上思考要怎麼用，可以檢視自己是不是真的理解了課堂說明。這也是我最喜歡的一部分! 在糾結又糾結之後順利完成，那種成就感真的會讓我很有學習的衝勁!</p>
</li>
<li><p>作業觀摩&#x2F;助教回覆<br>  當自己的作業是「成功了」，但同學的作業是「有效率的成功了」，或是助教有任何的點評，看到這些時我都會特別高興，因為又找到了另一種解決問題的方法。跟著別人的思路走一遍，將它內化成自己能理解的知識，這也是對我來說明顯有幫助的學習方式。</p>
</li>
</ol>
<p>跟著AC進度學習的同時，因為有了大方向，所以可以比較清楚的知道還有哪些欠缺的東西可以補足。學習期間<a href="https://www.w3schools.com/">W3school</a>、<a href="https://www.freecodecamp.org/">FreeCodeCamp</a>、<a href="https://developer.mozilla.org/zh-TW/">MDN</a>也作為補充資料給了我很多幫助。藉由閱讀不同的說明方式不斷作複習，不但加強記憶，偶爾看到一些新用法也很有趣。  </p>
<h2 id="後續規劃"><a href="#後續規劃" class="headerlink" title="後續規劃"></a>後續規劃</h2><p>整體來說，這三週的學習是很愉快的，我也決定繼續進入下學期課程。  </p>
<p>在下學期開課前，除了先進行課程預習外，希望能把這三週以來的筆記整理一下也放進部落格裡。相信隨著部落格的成長，除了可以檢視自己的曾經犯過的錯誤，也能更直觀的知道自己曾經學過什麼? 有沒有進步? 另外，目前進行到一半的 Ubuntu 及 Command Line 學習也很有趣!  </p>
<p>終於擺脫了那種工作上原地踏步的無力感，喜歡目前每天都在學習、每時每刻都在進步的自己!</p>
]]></content>
      <categories>
        <category>學習紀錄 - AlphaCamp</category>
      </categories>
      <tags>
        <tag>AlphaCamp</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 基本設定</title>
    <url>/posts/a970120e/</url>
    <content><![CDATA[<p>基本上經過上一篇的操作，在 <code>hexo s</code> 後應該已經可以在 <a href="http://localhost:4000/">http://localhost:4000</a> 看到預設的 Hello World 畫面了，但要讓 Blog 正式啟動前，我們還要先做一些個人化設定。  </p>
<span id="more"></span>

<blockquote>
<p>本文撰寫時的版本如下(可用 <code>hexo version</code> 確認)，不同版本的預設配置檔可能會有差異:<br>hexo: 6.0.0<br>hexo-cli: 4.3.0  </p>
</blockquote>
<ul>
<li>基本配置文件位置在 <code>root\_config.yml</code>，<font color=#FF6600>冒號後面都必需保留半型空格一格</font>。  </li>
<li>僅列出通常會修改或我已經修改的部分，其他請參考<a href="https://hexo.io/zh-tw/docs/configuration">官方網站</a>說明。</li>
</ul>
<h2 id="網站設定"><a href="#網站設定" class="headerlink" title="網站設定"></a>網站設定</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span>           <span class="comment"># 網站標題</span></span><br><span class="line"><span class="attr">subtitle:</span>             <span class="comment"># 網站副標題</span></span><br><span class="line"><span class="attr">description:</span>          <span class="comment"># 網站描述</span></span><br><span class="line"><span class="attr">keywords:</span>             <span class="comment"># 網站關鍵字(支援多個關鍵詞，用半型逗號隔開)</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span>      <span class="comment"># 作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span>          <span class="comment"># 網站語言 (台灣:zh-tw)</span></span><br><span class="line"><span class="attr">timezone:</span>             <span class="comment"># 時區(可留空以使用您電腦的時區)</span></span><br></pre></td></tr></table></figure>

<h2 id="網址設定"><a href="#網址設定" class="headerlink" title="網址設定"></a>網址設定</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here.</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://UserName.github.io/</span>           <span class="comment"># UserName更改為自己的帳戶名</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span>      <span class="comment"># 文章網址的格式(預設使用 年月日/文章名稱)/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span>                       <span class="comment"># permalink 中各區段的預設值</span></span><br></pre></td></tr></table></figure>
<ul>
<li>permalink 會依照設定值，在每次 generate 時重新產生網址，設定參數可參考<a href="https://hexo.io/zh-tw/docs/permalinks">官方文件</a>。我在命名檔名時，習慣使用日期 + 英文檔名(日期方便排序，不含空格的英文檔名較不會產生亂碼網址)，所以 permalink: 僅用 <code>:title</code> 參數 (最後的 <code>/</code> 要記得保留)。</li>
<li><strong><font color=red>2021&#x2F;12&#x2F;27 更新: <a href="/posts/d8dab675/">使用 Hexo-abbrlink 產生永久連結</a></font></strong></li>
</ul>
<h2 id="目錄設定"><a href="#目錄設定" class="headerlink" title="目錄設定"></a>目錄設定</h2><p>原則上都保留不變，除非有自訂路徑的需求。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span>            <span class="comment"># 原始檔案資料夾，存放編輯的所有內容</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span>            <span class="comment"># 存放靜態檔案的資料夾(hexo g 後產生)</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span>                 <span class="comment"># 標籤資料夾</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span>         <span class="comment"># 彙整資料夾(deploy後產生)</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span>      <span class="comment"># 分類資料夾</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>tags</code> 和 <code>categories</code> 資料夾預設是不存在的，有需要要另外新增資料夾。</li>
</ul>
<h2 id="擴充套件設定"><a href="#擴充套件設定" class="headerlink" title="擴充套件設定"></a>擴充套件設定</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/       # 提供各種套件，可以依自己需求安裝</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/         # 提供各種主題，可以依自己需求安裝</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span>                           <span class="comment"># 填寫主題名稱</span></span><br></pre></td></tr></table></figure>
<ul>
<li>本部落格選用 Next 主題(要把 landscape 改為 Next)，後續會另開一篇變更主題說明文。</li>
</ul>
<h2 id="部署設定"><a href="#部署設定" class="headerlink" title="部署設定"></a>部署設定</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Hexo 可同時部署到不同地方，相關設定參考<a href="https://hexo.io/zh-tw/docs/one-command-deployment">官方部署說明</a>。  </li>
<li>部署到 Github 方式已在用前篇 Hexo + Github Pages 建立部落格 中說明，這邊不另外贅述。</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>有效率地猜中數字</title>
    <url>/posts/5959db4f/</url>
    <content><![CDATA[<p><strong>題目來源:</strong> Alpha Camp 學期一作業<br>這是第一個讓我覺得”卡卡”的題目，也是一個讓我在寫出來後深刻認知到: “<strong>想不到解決問題的方法，會寫程式也沒用</strong>“的題目。</p>
<span id="more"></span>
<p>藉著記錄解題的過程，把當初解決問題的方法和思考方式寫下來，達成再次深入複習的目的。</p>
<h2 id="解題工具"><a href="#解題工具" class="headerlink" title="解題工具"></a>解題工具</h2><ol>
<li>Math.random() 會回傳一個偽隨機小數介於0到1之間(包含0，不包含1)  </li>
<li>Math.floor() 會回傳小於等於所給數字的最大整數(無條件捨去)。  </li>
<li>while 迴圈  </li>
<li>if statement</li>
</ol>
<h2 id="基本題"><a href="#基本題" class="headerlink" title="基本題"></a>基本題</h2><h3 id="題目要求"><a href="#題目要求" class="headerlink" title="題目要求"></a>題目要求</h3><ol>
<li>指定介於 1-100 之間的數字，存在 <code>answer</code> 變數裡  </li>
<li>設定一個 <code>guess</code> 變數，代表挑戰者 (電腦) 猜的數字  </li>
<li>電腦可重覆「猜數字」，比對 <code>guess</code> 和 <code>answer</code>，判斷太大或太小  </li>
<li>若兩者相等（猜對）則結束遊戲，且結束時須計算電腦猜了幾次</li>
</ol>
<h3 id="解題過程"><a href="#解題過程" class="headerlink" title="解題過程"></a>解題過程</h3><p>使用 Math.random() 和 Math.floor() 指定一個介於 1-100 之間的數字，存在 <code>answer</code> 變數裡。</p>
<blockquote>
<p>原本想要直接用 Math.ceil() 無條件進位，但後來發現 Math.random() 有可能產生 “0”。所以如果直接用 Math.ceil() 可能會發生 <code>guess === 0</code> 的問題(不符合猜數範圍)。  </p>
</blockquote>
<p>先用 Math.random() * 100 取得一個介於0到100之間(包含0，不包含100)的隨機小數。把這個小數套進 Math.floor() 裡面進行無條件捨去再加1，就能取得一個介於1到100之間(包含1，包含100)的隨機整數了。  </p>
<blockquote>
<p>這裡還犯過一個非常不應該的錯誤，我把 Math 寫成 math ，然後就又跳錯誤了……</p>
</blockquote>
<br/>

<p>到目前為止，條件一和條件二都可以達成了。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定介於 1-100 之間的數字，存在 `answer` 變數裡</span></span><br><span class="line"><span class="keyword">const</span> answer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定一個 `guess` 變數，代表挑戰者 (電腦) 猜的數字</span></span><br><span class="line"><span class="keyword">let</span> guess = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<br/>

<p>for &#x2F; while 的選擇—-因為這次的比大小是條件判斷，所以選擇 while 迴圈。<br>先把邏輯寫出來:  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成並印出答案</span></span><br><span class="line">宣告 anwer</span><br><span class="line"><span class="comment">// 進入迴圈的條件(重複執行的原因)</span></span><br><span class="line"><span class="keyword">while</span> (猜數 不等於 答案) ，則進入迴圈</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每一回合會重複的動作(放進迴圈裡)</span></span><br><span class="line">猜一次數字，並且回合數 + <span class="number">1</span> (接著進入結果判斷)</span><br><span class="line"><span class="variable constant_">IF</span> 猜數 &gt; 答案</span><br><span class="line">  則 印出回合數、印出猜數、印出莊家回答:太大了</span><br><span class="line"><span class="variable constant_">ELSE</span> <span class="variable constant_">IF</span> 猜數 &lt; 答案</span><br><span class="line">  則 印出回合數、印出猜數、印出莊家回答:太小了</span><br><span class="line"><span class="variable constant_">ELSE</span> (猜數 = 答案)</span><br><span class="line">  則 印出回合數、印出猜數、印出莊家回答:恭喜答對!</span><br><span class="line">  結束迴圈</span><br></pre></td></tr></table></figure>
<br/>

<p>好像差不多了，條件三和條件四也都可以達成了。但跟著邏輯再想一遍以後又發現了問題:  </p>
<ol>
<li>迴圈裡回合數每次 + 1，但不知道是從多少開始加，所以要先宣告回合數 &#x3D; 0  </li>
<li>一開始只生成答案無法達成進入迴圈條件，為了達成條件，先宣告猜數 &#x3D; 0</li>
</ol>
<p>以上問題都解決了，可以組合起來寫出程式碼了!  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ========= 宣告變數 ==========</span></span><br><span class="line"><span class="keyword">const</span> answer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span> <span class="comment">//正確答案</span></span><br><span class="line"><span class="keyword">let</span> guess = <span class="number">0</span> <span class="comment">//挑戰者猜的數字</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span> <span class="comment">//回合數</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========= 從這裡開始 ==========</span></span><br><span class="line"><span class="comment">// 先印出正確數字</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`正確答案為 <span class="subst">$&#123;answer&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設計判斷式和迴圈解決問題</span></span><br><span class="line"><span class="keyword">while</span> (guess !== answer) &#123;</span><br><span class="line">  </span><br><span class="line">  guess = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span> <span class="comment">// 挑戰者猜一個本回合的數字    </span></span><br><span class="line">  count += <span class="number">1</span>                                     </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 條件判斷</span></span><br><span class="line">  <span class="keyword">if</span> (guess &gt; answer) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第 <span class="subst">$&#123;count&#125;</span> 回合，挑戰者猜 <span class="subst">$&#123;guess&#125;</span>，莊家回答:太大了，再猜一次`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; answer) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第 <span class="subst">$&#123;count&#125;</span> 回合，挑戰者猜 <span class="subst">$&#123;guess&#125;</span>，莊家回答:太小了，再猜一次`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第 <span class="subst">$&#123;count&#125;</span> 回合，挑戰者猜 <span class="subst">$&#123;guess&#125;</span>，莊家回答:恭喜答對!`</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;===============遊戲結束===============&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h2 id="進階題"><a href="#進階題" class="headerlink" title="進階題"></a>進階題</h2><h3 id="題目要求-1"><a href="#題目要求-1" class="headerlink" title="題目要求"></a>題目要求</h3><ul>
<li>讓電腦在 10 次以內猜對</li>
</ul>
<h3 id="解題過程-1"><a href="#解題過程-1" class="headerlink" title="解題過程"></a>解題過程</h3><p>花了三個小時都沒想出來，最後決定上網找找靈感，幸運發現一個前輩的解題思路。認真看完一遍，發現就跟以前玩終極密碼一樣，最快的方式就是縮小範圍，砍半再砍半。如果用對半切的方式，已知 2 的 10 次方為 1024，即範圍 1~1024 內的數字用砍半方式一定可以在 10 次內猜到，符合題目要求。  </p>
<p>知道方法後要做的事只有2件:  </p>
<ol>
<li>設定猜數的上限和下限  </li>
<li>讓猜數取上限和下限的中位數</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設定猜數的起始上限和下限(放起始宣告位置)</span></span><br><span class="line"><span class="keyword">let</span> rangeMax = <span class="number">100</span> </span><br><span class="line"><span class="keyword">let</span> rangeMin = <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定迴圈裡猜數的上限和下限重新賦值的方式(放入迴圈)</span></span><br><span class="line"><span class="comment">// 猜過的數字不能包含在範圍內</span></span><br><span class="line">rangeMax = guess - <span class="number">1</span></span><br><span class="line">rangeMin = guess + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以猜數範圍的中位數再猜一次(放入迴圈)</span></span><br><span class="line">guess = <span class="title class_">Math</span>.<span class="title function_">floor</span>((rangeMin + rangeMax) / <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<br/>

<p>該作的變數調整都完成了，接下來就是把它們塞進該放的位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告並產生答案</span></span><br><span class="line"><span class="keyword">const</span> answer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// ========= start coding ==========</span></span><br><span class="line"><span class="keyword">let</span> guess = <span class="number">0</span>         <span class="comment">// 宣告挑戰者猜的數字為0</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>         <span class="comment">// 宣告起始回合數為0</span></span><br><span class="line"><span class="keyword">let</span> rangeMax = <span class="number">100</span>    <span class="comment">// 宣告猜測最大值為100</span></span><br><span class="line"><span class="keyword">let</span> rangeMin = <span class="number">1</span>      <span class="comment">// 宣告猜測最小值為1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`莊家數字是 <span class="subst">$&#123;answer&#125;</span>`</span>)  <span class="comment">//印出正確答案</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (guess !== answer) &#123;</span><br><span class="line">  guess = <span class="title class_">Math</span>.<span class="title function_">floor</span>((rangeMin + rangeMax) / <span class="number">2</span>)</span><br><span class="line">  count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (guess &gt; answer) &#123;  </span><br><span class="line">    rangeMax = guess - <span class="number">1</span>  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第 <span class="subst">$&#123;count&#125;</span> 局|電腦猜 <span class="subst">$&#123;guess&#125;</span> ，太大，再猜一次! 範圍 <span class="subst">$&#123;rangeMin&#125;</span> ~ <span class="subst">$&#123;rangeMax&#125;</span> 。`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; answer) &#123;</span><br><span class="line">    rangeMin = guess + <span class="number">1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第 <span class="subst">$&#123;count&#125;</span> 局|電腦猜 <span class="subst">$&#123;guess&#125;</span> ，太小，再猜一次! 範圍 <span class="subst">$&#123;rangeMin&#125;</span> ~ <span class="subst">$&#123;rangeMax&#125;</span> 。`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第 <span class="subst">$&#123;count&#125;</span> 局|電腦猜 <span class="subst">$&#123;guess&#125;</span> ，恭喜答對!`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<p>終於成功了!! 這也是文章開頭說的: 如果知道解決問題的方法，只要能正確地把程式碼寫出來就好；如果不知道解決問題的方法，就算程式語言再精深都沒用，因為連怎麼開始都不知道。  </p>
<p>其他小題目還好，就不特別寫解題筆記了。預計下一篇會寫更卡一點的期末考 😅</p>
]]></content>
      <categories>
        <category>JavaScript 解題</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AlphaCamp</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 編輯文章</title>
    <url>/posts/978c1db/</url>
    <content><![CDATA[<p>基本設定都完成後就可以來寫部落格了! 在正式開始前，如果能對 Hexo 的資料夾架構及 Front-matter 有點基本的認識，會對後續的操作很有幫助。</p>
<span id="more"></span>

<h2 id="Hexo-資料夾架構"><a href="#Hexo-資料夾架構" class="headerlink" title="Hexo 資料夾架構"></a>Hexo 資料夾架構</h2><p>之前在 <code>hexo init</code> 之後，根目錄資料夾會多了一些預設檔案，接下來會對其中比較重要的做簡單說明。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root</span><br><span class="line">├── .deploy_git             # 內含已部署到 Github Repository 的所有檔案</span><br><span class="line">├── public                  # hexo g 生成靜態網站檔</span><br><span class="line">├── scaffolds               # 樣板資料夾(hexo new 會從這裡抓樣板，也可以自己新建樣板)</span><br><span class="line">|   ├── draft.md            # 草稿樣板</span><br><span class="line">|   ├── page.md             # 頁面樣板</span><br><span class="line">|   └── post.md             # 文章樣板(預設)</span><br><span class="line">├── source                  # 存放原始檔案的地方</span><br><span class="line">|   ├── _data               # 存放自定義設定原始碼的地方</span><br><span class="line">|   ├── _drafts             # 草稿資料夾</span><br><span class="line">|   └── _posts              # 文章資料夾</span><br><span class="line">├── themes                  # 各種主題資料夾</span><br><span class="line">|   └── landscape           # 預設主題</span><br><span class="line">|       └── _config.yml     # 主題樣式設定檔</span><br><span class="line">├── .gitignore              # 設定不想被加入版本控制或是上傳到 GitHub 的資料夾或檔案</span><br><span class="line">└── _config.yml             # Hexo 基本設定</span><br></pre></td></tr></table></figure>
<ul>
<li><code>_drafts</code> 草稿資料夾預設會被 generate 、server 和 deploy 指令略過(<code>_post</code> 以外以”_”開頭的資料夾都是)。如果想在 localhost 先預覽的話，可以在 <code>root\_config.yml</code> 裡把 <code>render_drafts: false(預設)</code> 改為 true。</li>
</ul>
<h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>Front-matter 是檔案最上方以 — 分隔的區域，用於指定個別檔案的變數。可以每篇文章個別設定，也可以預先在樣板中建立套用內容。常用的變數如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">title</span>        <span class="comment"># 標題(預設為檔案名稱)</span></span><br><span class="line"><span class="string">date</span>         <span class="comment"># 建立日期(預設為檔案建立日期)</span></span><br><span class="line"><span class="string">updated</span>      <span class="comment"># 更新日期(預設為檔案更新日期)</span></span><br><span class="line"><span class="string">comments</span>     <span class="comment"># 留言功能(預設 true :開啟)</span></span><br><span class="line"><span class="string">tags</span>         <span class="comment"># 標籤</span></span><br><span class="line"><span class="string">categories</span>   <span class="comment"># 分類</span></span><br></pre></td></tr></table></figure>
<ul>
<li>當因為重新部署或其他原因，導致在沒有修改文章情況下顯示文章更新，可以手動修改 <code>updated</code> 值，讓他跟建立日期相同即可。  </li>
<li>多個標籤&#x2F;多個分類寫法不同，可參考<a href="https://hexo.io/zh-tw/docs/front-matter#%E5%88%86%E9%A1%9E%E5%92%8C%E6%A8%99%E7%B1%A4">官方說明</a>。</li>
</ul>
<h2 id="草稿編輯"><a href="#草稿編輯" class="headerlink" title="草稿編輯"></a>草稿編輯</h2><h3 id="新增草稿"><a href="#新增草稿" class="headerlink" title="新增草稿"></a>新增草稿</h3><p>草稿會建立在 <code>root\source\_drafts</code> 資料夾內。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new draft 文章名稱</span><br></pre></td></tr></table></figure>
<h3 id="草稿轉文章"><a href="#草稿轉文章" class="headerlink" title="草稿轉文章"></a>草稿轉文章</h3><p>指令會把檔案從 <code>_drafts</code> 移至 <code>_posts</code> 資料夾內，也可以自己手動移動。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish draft 文章名稱</span><br></pre></td></tr></table></figure>

<h2 id="文章編輯"><a href="#文章編輯" class="headerlink" title="文章編輯"></a>文章編輯</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>會建立在 <code>root\source\_posts</code> 資料夾內。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new 文章名稱         <span class="comment"># 預設抓取 post 樣板</span></span><br></pre></td></tr></table></figure>
<h3 id="刪除貼文"><a href="#刪除貼文" class="headerlink" title="刪除貼文"></a>刪除貼文</h3><p>直接從 <code>root\source</code> 資料夾刪除本地檔案，清除靜態檔再重新上傳即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h2 id="頁面編輯"><a href="#頁面編輯" class="headerlink" title="頁面編輯"></a>頁面編輯</h2><p>頁面和文章不同，是指每個主題 menu 項目的頁面。如果有開啟 menu 項目卻沒有預設頁面的情況下，會被導向 404 畫面。常用的幾個頁面如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">about</span>         <span class="comment"># 關於我(通常會寫網站介紹或作者介紹)</span></span><br><span class="line"><span class="string">archives</span>      <span class="comment"># 歸檔(依發布日期把所有文章排序)</span></span><br><span class="line"><span class="string">categories</span>    <span class="comment"># 分類(會依每篇文章 Front-matter 裡的分類建立分類目錄-有層級)</span></span><br><span class="line"><span class="string">tags</span>          <span class="comment"># 標籤(會依每篇文章 Front-matter 裡的分類建立標籤目錄-無層級)</span></span><br><span class="line"><span class="string">link</span>          <span class="comment"># 對外連結(通常是推薦部落格或網站的連結)</span></span><br></pre></td></tr></table></figure>

<h3 id="新建頁面"><a href="#新建頁面" class="headerlink" title="新建頁面"></a>新建頁面</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page 頁面名稱</span><br></pre></td></tr></table></figure>
<ul>
<li>頁面通常不需要開啟留言功能，所以在新建時要記得將 Front-matter 的 <code>comments</code> 值改為 false。</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2021-12-14 18:33:37</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2021-12-14 18:34:46</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<ul>
<li>新建頁面會新建一個 <code>index</code> 檔案，放在”頁面名稱”資料夾裡。</li>
</ul>
<h2 id="文章發布"><a href="#文章發布" class="headerlink" title="文章發布"></a>文章發布</h2><p>同之前的部署指令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Hexo-abbrlink 產生永久連結</title>
    <url>/posts/d8dab675/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>因為是在建置部落格的同時整理並撰寫 Hexo 筆記，內容的更動導致常常需要修改多篇文章的檔名，permalink 自動產生網址的設定也連帶造成了我一些困擾，所以想用 Hexo-abbrlink 來一勞永逸。  </p>
<span id="more"></span>
<p>我原本 permalink 的設定是直接從檔名產生網址。網路上的教學建議檔案用日期 + 英文標題命名，所以修改的同時也讓同一篇文章的網址不斷改動。  </p>
<blockquote>
<p>備註: 建議檔案用日期 + 英文標題命名原因  </p>
<ol>
<li>日期方便作檔案排序。  </li>
<li>中文網址在台灣及大陸外的地區必須以編碼方式來呈現， URL 被轉碼後會變得很長(長得像亂碼)，這對 SEO 來說也較為不利。</li>
</ol>
</blockquote>
<h2 id="使用-Hexo-abbrlink-的好處"><a href="#使用-Hexo-abbrlink-的好處" class="headerlink" title="使用 Hexo-abbrlink 的好處"></a>使用 Hexo-abbrlink 的好處</h2><p><strong>1. 網址固定，不再因修改檔名或日期變動</strong><br>Hexo-abbrlink 會依照文章標題產生永久連結，並保存在 Front-matter (檔案最上方以 — 分隔的區域)，之後即使更改檔名也不會再變動。<br><img src="/../../Blog-image/posts/2021-12-27_001.webp" alt="abbrlink存入Front-matter20211227-001"></p>
<blockquote>
<p>舊文章(已經部署)會在下一次 <code>hexo g</code> 時產生 abbrlink 。<br>新文章(還沒部署)會在 <code>hexo s</code> 時就產生 abbrlink 。  </p>
</blockquote>
<p><strong>2. 檔名可依自己方便取了</strong><br><del>再也不用想英文標題了!!</del>  </p>
<p><strong>3. 降低因網址變動產生的404問題</strong><br>據說404錯誤會影響網站在SEO上的排名，讓其他人較不容易搜尋到自己的頁面。  </p>
<h2 id="安裝-hexo-abbrlink"><a href="#安裝-hexo-abbrlink" class="headerlink" title="安裝 hexo-abbrlink"></a>安裝 hexo-abbrlink</h2><blockquote>
<p>本篇設定的 Hexo 及 NexT 版本如下，不同版本可能會有功能或設定方式上的差異!<br>Hexo 版本: hexo: 6.0.0<br>Next 版本: hexo-theme-next-8.8.2  </p>
</blockquote>
<p><strong>1. 安裝套件</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p><strong>2. 修改 <code>root\_config.yml</code> 文件</strong>  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># support dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<ul>
<li>也可以自己修改 permalink 參數(把 post 刪掉或增減其他參數)</li>
<li><code>alg</code> 是雜湊編碼產生方式， <code>rep</code> 是雜湊編碼表示方式(預設十進位)，兩種參數的搭配結果如下:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crc16 &amp; hex    https://XXXX.com/posts/66c8/</span><br><span class="line">crc16 &amp; dec    https://XXXX.com/posts/65535/</span><br><span class="line">crc32 &amp; hex    https://XXXX.com/posts/8ddf18fb/</span><br><span class="line">crc32 &amp; dec    https://XXXX.com/posts/1690090958/</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://github.com/rozbo/hexo-abbrlink">rozbo&#x2F;hexo-abbrlink README.md 文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NexT 主題變更 &amp; 設定</title>
    <url>/posts/ebe0f18a/</url>
    <content><![CDATA[<p>基本設定都做好了，文章也成功發佈了，接下來該找個美美的主題幫部落格換個新衣服。我最後找了看起來簡約大方的 NexT 主題，持續都有在作版本更新，開源資源也很多，看到各種大神把基本款改成高級訂製款，除了框架根本看不出原樣，覺得超厲害!  </p>
<span id="more"></span>
<p>這篇只是把當初的建置過程記錄下來，萬一忘記或發生什麼問題，至少還知道原本是怎麼作出來的。如果有從頭開始的人，參考這篇照著做應該可以略過不少我踩過的坑。  </p>
<p>項目有點多(原則上是照著 NexT 的 <code>_config.yml</code> 檔順序寫的)，如果只是想找特定功能設定的，可以直接從左側目錄欄或 <code>Ctrl+F</code> 跳到需要的位置就好。如果在這篇裡沒有找到，那就要等我陸續整理出來再更新新文章了(前提是我有用到的功能才有辦法!)  </p>
<h2 id="NexT-主題選擇"><a href="#NexT-主題選擇" class="headerlink" title="NexT 主題選擇"></a>NexT 主題選擇</h2><p>現在網路上可以找到兩種版本的 NexT 主題，分別是 <a href="https://github.com/next-theme/hexo-theme-next">next-theme</a> 和 <a href="https://github.com/theme-next/hexo-theme-next">theme-next</a> 提供的。爬了討論串後發現，因為 theme-next 團隊的 owner 始终拒绝向其它團隊成員提供足夠的權限，且 owner 本人自 2019 年 10 月起已長期不在線，導致其他團隊成員無法管理倉庫，所以其中一個主要貢獻者只好搬家，並用 next-theme 繼續提供更新版本。</p>
<ul>
<li><a href="https://theme-next.js.org/">next-theme 官方網站</a></li>
</ul>
<blockquote>
<p>本篇設定的 Hexo 及 NexT 版本如下，不同版本可能會有功能或設定方式上的差異!<br>Hexo 版本: hexo: 6.0.0<br>Next 版本: hexo-theme-next-8.8.2  </p>
</blockquote>
<h2 id="主題安裝"><a href="#主題安裝" class="headerlink" title="主題安裝"></a>主題安裝</h2><h3 id="npm-安裝-推薦"><a href="#npm-安裝-推薦" class="headerlink" title="npm 安裝(推薦)"></a>npm 安裝(推薦)</h3><p><strong>主題資料夾位置: <code>root\node_modules\hexo-theme-next</code></strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 根目錄</span><br><span class="line">npm install hexo-theme-next    <span class="comment"># 默認最新版本</span></span><br></pre></td></tr></table></figure>

<h3 id="git-安裝"><a href="#git-安裝" class="headerlink" title="git 安裝"></a>git 安裝</h3><p><strong>主題資料夾位置: <code>root\themes\next</code></strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 進入根目錄</span></span><br><span class="line"><span class="built_in">cd</span> 根目錄</span><br><span class="line"></span><br><span class="line"><span class="comment"># 從網址複製檔案到 themes 裡的 next 資料夾裡(沒有的話會自動新建)</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>
<p><img src="/../../Blog-image/posts/2021-12-26_001.webp" alt="複製倉庫網址20211226-001">  </p>
<h2 id="主題套用"><a href="#主題套用" class="headerlink" title="主題套用"></a>主題套用</h2><p>修改 <code>root\_config.yml</code> 裡的主題設定。  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span>     <span class="comment"># 預設值為 landscape</span></span><br></pre></td></tr></table></figure>

<h2 id="個人化調整"><a href="#個人化調整" class="headerlink" title="個人化調整"></a>個人化調整</h2><h3 id="config-next-yml-設定"><a href="#config-next-yml-設定" class="headerlink" title="_config.next.yml 設定"></a>_config.next.yml 設定</h3><p>根據 next-theme 官方說明(<a href="https://github.com/next-theme/hexo-theme-next/issues/4">【必讀】更新說明及常見問題</a>)建議:<br>為了避免更新出現衝突，使用 Hexo 官方支持的 <code>root\_config.next.yml</code> 方式做主題個人化設定。</p>
<ol>
<li>確保使用 Hexo 5.0 以上的版本。</li>
<li>複製 <code>主題資料夾\_config.yml</code> 檔案重新命名並移到根目錄 <code>root\_config.next.yml</code> 。<br/></li>
</ol>
<h3 id="樣式選擇"><a href="#樣式選擇" class="headerlink" title="樣式選擇"></a>樣式選擇</h3><p>四選一，把想要的樣式註解取消，可以存檔後用 <code>hexo s</code> 看看差別再決定。我的 Blog 是用 Gemini 。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>

<h3 id="網站圖示變更"><a href="#網站圖示變更" class="headerlink" title="網站圖示變更"></a>網站圖示變更</h3><p>圖片路徑: <code>主題資料夾\source\images</code> ，變更檔名即可。  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br></pre></td></tr></table></figure>

<h3 id="版權聲明"><a href="#版權聲明" class="headerlink" title="版權聲明"></a>版權聲明</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/about/cclicenses/</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="comment"># Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="comment"># Available values: big | small</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">small</span>          <span class="comment"># 圖示大小</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span>       <span class="comment"># 在 sidebar 顯示</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span>           <span class="comment"># 在文章最下方顯示</span></span><br></pre></td></tr></table></figure>

<h3 id="menu-選單設定"><a href="#menu-選單設定" class="headerlink" title="menu 選單設定"></a>menu 選單設定</h3><p>把想要的樣式註解取消。<br>NexT 有支援 font awesome ，所以可以找喜歡的 icon 直接做替換。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">menu</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span>                        <span class="comment"># 首頁</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user                # 關於</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span>                   <span class="comment"># 標籤</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span>         <span class="comment"># 分類</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span>        <span class="comment"># 歸檔</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar      # 時間表</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">/sitemap.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-sitemap</span>       <span class="comment"># 網站地圖(SEO)</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat        # 公益404</span></span><br><span class="line"></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span>             <span class="comment"># 顯示 menu 圖示</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span>           <span class="comment"># 顯示項目內數量</span></span><br></pre></td></tr></table></figure>

<h3 id="側欄設定"><a href="#側欄設定" class="headerlink" title="側欄設定"></a>側欄設定</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span>       <span class="comment"># 設定左邊或右邊顯示</span></span><br><span class="line">  <span class="comment">#position: right</span></span><br></pre></td></tr></table></figure>

<h3 id="頭像設定"><a href="#頭像設定" class="headerlink" title="頭像設定"></a>頭像設定</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span>                             <span class="comment"># sidebar 內頭像設定</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span>           <span class="comment"># 預設路徑: `主題資料夾\source\images` (可改貼圖片連結)</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span>                     <span class="comment"># true (圓形)/ false(方形)</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span>                    <span class="comment"># 滑鼠點擊旋轉動畫</span></span><br></pre></td></tr></table></figure>

<h3 id="社群設定"><a href="#社群設定" class="headerlink" title="社群設定"></a>社群設定</h3><ol>
<li>把想要顯示的項目註解取消。  </li>
<li>NexT 有支援 font awesome ，所以可以找喜歡的 icon 直接做替換。  </li>
<li>連結記得改成自己的連結網址。  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:yourname@gmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment"># 以下省略......</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>              <span class="comment"># 社群連結圖示</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">true</span>          <span class="comment"># 只顯示圖示不顯示名稱</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span>         <span class="comment"># 滑動到社群鏈結時的有轉場效果</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="側欄目錄設定-閱讀文章時"><a href="#側欄目錄設定-閱讀文章時" class="headerlink" title="側欄目錄設定(閱讀文章時)"></a>側欄目錄設定(閱讀文章時)</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>         <span class="comment"># 在側欄自動生成並顯示文章目錄(依標題層級)</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span>         <span class="comment"># 幫文章目錄自動編號</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span>          <span class="comment"># 標題超出欄寬整行換行</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">True</span>     <span class="comment"># 展開所有目錄層級 (false 僅展開當前位置目錄)</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span>         <span class="comment"># 最大目錄層級數</span></span><br></pre></td></tr></table></figure>

<h3 id="頁腳設定"><a href="#頁腳設定" class="headerlink" title="頁腳設定"></a>頁腳設定</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2021</span>              <span class="comment"># 指定網站開始年，若沒指定則顯示當下年度</span></span><br><span class="line">  <span class="attr">icon:</span>                    <span class="comment"># 年度和版權資訊中間的 icon</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-heart</span>      <span class="comment"># Font Awesome 的 icon 代號</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">false</span>        <span class="comment"># 開啟圖示動畫</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#ff0000&quot;</span>       <span class="comment"># 用16進位色碼改變 icon 顏色</span></span><br><span class="line">  <span class="attr">copyright:</span>               <span class="comment"># 若沒指定則套用 Hexo `_config.yml` 的作者名</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">False</span>           <span class="comment"># 顯示 Powered by Hexo &amp; NexT</span></span><br></pre></td></tr></table></figure>

<h3 id="摘要及-Read-More-功能"><a href="#摘要及-Read-More-功能" class="headerlink" title="摘要及 Read More 功能"></a>摘要及 Read More 功能</h3><p>首頁預設顯示文章全文，如果希望每篇文章像瀏覽卡片一樣僅提供部分摘要，點擊文章標題再打開全文，官方提供兩種方式( <code>&lt;!-- more --&gt;</code> 或 <code>excerpt_description</code>)，這裡僅說明官方推薦的方式:  </p>
<ul>
<li>在文章中使用 <code>&lt;!-- more --&gt;</code> 手動進行截斷，首頁預覽只會顯示到 <code>&lt;!-- more --&gt;</code> 前的文字。<br><img src="/../../Blog-image/posts/2021-12-26_002.webp" alt="read more20211226-002">  </li>
<li>完成以上設定後，首頁只看得到摘要，點擊文章標題進入內文。如果希望新增”閱讀全文”按鈕，則修改 <code>root\_config.next.yml</code> 設定值  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span>             <span class="comment"># 開啟&quot;閱讀全文&quot;按鈕</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>點擊”文章標題”和點擊”閱讀全文”的差異:<br>文章標題: 從頁首標題開始顯示文章頁面。<br>點擊閱讀全文: 跳至 <code>&lt;!-- more --&gt;</code> 後段落顯示文章頁面。</p>
</blockquote>
</li>
</ul>
<h3 id="文章的-Front-matter-在首頁的顯示設定"><a href="#文章的-Front-matter-在首頁的顯示設定" class="headerlink" title="文章的 Front-matter 在首頁的顯示設定"></a>文章的 Front-matter 在首頁的顯示設定</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">false</span>        <span class="comment"># 顯示項目文字</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span>        <span class="comment"># 顯示發佈日期</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>          <span class="comment"># 開啟顯示更新日期功能</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span>     <span class="comment"># 僅在發佈日和更新日不同時顯示更新日期</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span>        <span class="comment"># 顯示文章分類</span></span><br></pre></td></tr></table></figure>
<h3 id="添加文章字數與所需閱讀時間"><a href="#添加文章字數與所需閱讀時間" class="headerlink" title="添加文章字數與所需閱讀時間"></a>添加文章字數與所需閱讀時間</h3><p>試過 <code>hexo-symbols-count-time</code> 和 <code>hexo-wordcount</code> 兩樣插件，但是有幾篇文章不明原因沒辦法計算字數。原本打算放棄這個功能了，幸好在 next-theme 的 Repository 裡找到他們提供的插件 <a href="https://github.com/next-theme/hexo-word-counter">hexo-word-counter</a> ，測試過後確定沒有問題。  </p>
<p>安裝套件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-word-counter</span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>修改 <code>root\_config.yml</code> 設定值</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>                 <span class="comment"># 文章字數統計顯示</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>                    <span class="comment"># 文章閱讀時間顯示</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span>           <span class="comment"># 網頁底部網站總字數統計顯示</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span>              <span class="comment"># 網頁底部網站總閱讀時間顯示</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span>      <span class="comment"># 字數統計是否排除程式碼</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>                        <span class="comment"># 平均文字長度，中文為 2, 英文為 5, 預設為 4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>                      <span class="comment"># 一分鐘閱讀字數</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>
<p>修改 <code>root\_config.next.yml</code> 設定值</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">false</span>         <span class="comment"># true 在發布日期下一行/ false 和發布日期同一行</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span>        <span class="comment"># 網頁底部顯示項目文字</span></span><br></pre></td></tr></table></figure>

<h3 id="文章底部標籤圖示設定"><a href="#文章底部標籤圖示設定" class="headerlink" title="文章底部標籤圖示設定"></a>文章底部標籤圖示設定</h3><p>預設文章底部顯示的標籤前綴會用 <code>#</code> ，若要改用圖示 <i class="fa fa-tags"></i> 取代:  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="文章底部上一篇-x2F-下一篇連結"><a href="#文章底部上一篇-x2F-下一篇連結" class="headerlink" title="文章底部上一篇&#x2F;下一篇連結"></a>文章底部上一篇&#x2F;下一篇連結</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Available values: left(上一篇在左邊) | right(上一篇在右邊) | false(關閉功能)</span></span><br><span class="line"><span class="attr">post_navigation:</span> <span class="string">left</span></span><br></pre></td></tr></table></figure>

<h3 id="回到頂部功能"><a href="#回到頂部功能" class="headerlink" title="回到頂部功能"></a>回到頂部功能</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>            <span class="comment"># 功能開啟</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span>           <span class="comment"># true 在側欄底部顯示 / false 在頁面右下角顯示</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span>     <span class="comment"># 顯示閱讀進度百分比</span></span><br></pre></td></tr></table></figure>

<h3 id="閱讀進度條"><a href="#閱讀進度條" class="headerlink" title="閱讀進度條"></a>閱讀進度條</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span>              <span class="comment"># 開啟功能</span></span><br><span class="line">  <span class="attr">start_at:</span> <span class="string">left</span>             <span class="comment"># left 由左往右 / right 由右往左</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span>              <span class="comment"># 進度條在瀏覽器頁面的位置: top / bottom</span></span><br><span class="line">  <span class="attr">reversed:</span> <span class="literal">false</span>            <span class="comment"># true 顯示剩餘進度 / false 顯示已閱讀進度</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span>           <span class="comment"># 進度條顏色</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span>                <span class="comment"># 進度條粗細</span></span><br></pre></td></tr></table></figure>

<h3 id="Github-右上角標"><a href="#Github-右上角標" class="headerlink" title="Github 右上角標"></a>Github 右上角標</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                                <span class="comment"># 開啟功能</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/UserName</span>      <span class="comment"># Github 網址</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span>                  <span class="comment"># 滑鼠顯示文字</span></span><br></pre></td></tr></table></figure>

<h3 id="站內搜索功能"><a href="#站內搜索功能" class="headerlink" title="站內搜索功能"></a>站內搜索功能</h3><p>安裝套件  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>
<p>修改 <code>root\_config.next.yml</code> 設定值  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>新增 <code>root\_config.yml</code> 設定值  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">all</span>         <span class="comment"># 搜尋範圍。可選 post (Default) / page / all</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span>      <span class="comment"># true 全文搜索 / false 在標題及 meta info 裡搜索</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>
<br/>


<p>NexT 主題的基本設定就到這裡啦~ 可以自定義設定的地方太多了，這一篇筆記寫了三天才結束!! 還有一些功能還沒寫到，像是評論功能、閱讀字數&#x2F;時間、閱讀人數…等，預計要另外再開幾篇才能寫完。<br>雖然初期建置摸索真的花了很多時間，但是看到功能一個一個增加，實在是很有成就感啊!!</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NexT 文末感謝閱讀提示</title>
    <url>/posts/670011ce/</url>
    <content><![CDATA[<p>又犯了”看到別人的部落格有，我也想試試看的”毛病 😅 找了很多網路教學，發現基本都會修改到 NexT 的原始檔案，這對後面的版本更新很不利，所以決定自己改改看!  </p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在看了網路教學把部落格增加了很多功能後，有一次不小心覆蓋了原始檔案，然後就部落格”主題初始化”了。因為之前都是照著別人的教學直接去修改主題檔案的原始碼，根本記不得是改了哪個路徑的哪個檔案，也不記得改了那一大堆原始碼裡的哪一段。所以我連想重做一次都很難，要重新找一次教學，想哭……  </p>
<p>仔細看了 NexT 團隊提供的說明，他們有提出: 為了避免發生我這種狀況，建議大家在做功能修改時，盡可能不要改動原始檔案，而是利用 <code>custom_file_path</code> 新建設定檔案套用，會讓 NexT 主題在版本更新時可以更無痛升級。  </p>
<p>研究一下網路教學的程式碼結構，發現就是把基本的 HTML 、 CSS 套進 Nunjucks 的模板裡而已。成功試出來後，趕快把修改步驟記錄下來，讓自己以後魔改時參考。</p>
<h2 id="Custom-Files-用法"><a href="#Custom-Files-用法" class="headerlink" title="Custom Files 用法"></a>Custom Files 用法</h2><blockquote>
<p>本篇設定的 Hexo 及 NexT 版本如下，不同版本可能會有功能或設定方式上的差異!<br>Hexo 版本: hexo: 6.0.0<br>Next 版本: hexo-theme-next-8.8.2  </p>
</blockquote>
<p>在不改變 NexT 原始檔的情況下，只要在 <code>root\source\_data</code> 中新建並編輯相關檔案，即可直接覆蓋 NexT 原始設定。使用 Custom Files 的好處:</p>
<ol>
<li>後續如果 NexT 有版本升級可直接完全覆蓋，已做好的個人化設定不受影響。</li>
<li>可以直接在 Custom Files 管理所有的個人化修改。</li>
</ol>
<h2 id="修改步驟"><a href="#修改步驟" class="headerlink" title="修改步驟"></a>修改步驟</h2><blockquote>
<p>本文的 NexT 主題 config 一律採用 <code>root\_config.next.yml</code> 方式設定，請參考<a href="https://ritachien.github.io/posts/ebe0f18a/#config-next-yml-%E8%A8%AD%E5%AE%9A" title=" config.next.yml 設定 " target="_blank" > config.next.yml 設定 </a>說明。</p>
</blockquote>
<h3 id="新建-Custom-File"><a href="#新建-Custom-File" class="headerlink" title="新建 Custom File"></a>新建 Custom File</h3><ol>
<li>修改 <code>root\_config.next.yml</code> 設定，把 <code>postBodyEnd</code> 取消註解。  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">postBodyEnd:</span> <span class="string">source/_data/post-body-end.njk</span></span><br></pre></td></tr></table></figure></li>
<li>在 <code>root\source\_data</code> 新增 <code>post-body-end.njk</code> 檔案。post-body-end 指的就是每篇文章最後的位置。</li>
</ol>
<h3 id="簡單版-直接寫入要顯示的文字"><a href="#簡單版-直接寫入要顯示的文字" class="headerlink" title="簡單版(直接寫入要顯示的文字)"></a>簡單版(直接寫入要顯示的文字)</h3><ol>
<li>將文字、樣式、模板寫進 <code>post-body-end.njk</code> 檔案。  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在文章底部添加感謝閱讀 --&gt;        # 說明修改目的，方便後續維護</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index and theme.end_info.enable %&#125;</span><br><span class="line">    &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;letter-spacing: 5px&quot;&gt;</span><br><span class="line">      ----------------  本文結束  &lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;  感謝您的閱讀  -----------------</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
<li>新增 <code>root\_config.next.yml</code> 設定，開啟 <code>end_info</code> 功能。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">end_info:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="進階版-要顯示文字在-root-config-next-yml-中修改"><a href="#進階版-要顯示文字在-root-config-next-yml-中修改" class="headerlink" title="進階版(要顯示文字在 root\_config.next.yml 中修改)"></a>進階版(要顯示文字在 <code>root\_config.next.yml</code> 中修改)</h3><ol>
<li>將文字、樣式、模板寫進 <code>post-body-end.njk</code> 檔案。  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在文章底部添加感謝閱讀 --&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index and theme.end_info.enable %&#125;</span><br><span class="line">    &lt;div style=&quot;text-align:center; color:#ccc; font-size:14px; letter-spacing:5px&quot;&gt;</span><br><span class="line">      &#123;&#123;theme.end_info.start_info&#125;&#125;&amp;nbsp;&lt;i class=&quot;&#123;&#123;theme.end_info.icon&#125;&#125;&quot;&gt;&lt;/i&gt;&amp;nbsp;&#123;&#123;theme.end_info.end_info&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
<li>新增 <code>root\_config.next.yml</code> 設定，開啟 <code>end_info</code> 功能。  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">end_info:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                                 <span class="comment"># 開啟功能</span></span><br><span class="line">  <span class="attr">start_info:</span> <span class="string">&#x27;----------------  本文結束&#x27;</span>      <span class="comment"># 起始文字</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-paw</span>                              <span class="comment"># icon 編碼</span></span><br><span class="line">  <span class="attr">end_info:</span> <span class="string">&#x27;感謝您的閱讀  -----------------&#x27;</span>   <span class="comment"># 結束文字</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="修改程式碼說明"><a href="#修改程式碼說明" class="headerlink" title="修改程式碼說明"></a>修改程式碼說明</h2><p>這次的進階版是自己琢磨出來的，將撰寫規則筆記下來，方便後續修改並維護。  </p>
<h3 id="Nunjucks-模板啟用"><a href="#Nunjucks-模板啟用" class="headerlink" title="Nunjucks 模板啟用"></a>Nunjucks 模板啟用</h3><p>不同條件使用 <code>and</code> 連接即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if not is_index and theme.end_info.enable %&#125;</span><br><span class="line">  # 中間填入符合條件後要執行的東西</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p><code>if not is_index</code><br>觀察 Hexo 結構可以發現，除了 <code>_posts</code> 是由各個不同標題的 <code>.md</code> 檔組成，其他如: 標籤、分類、404、歸檔…等資料夾都只有 <code>index.md</code>。所以如果只要在非 index 頁面啟用，可加上此條件。</p>
</li>
<li><p><code>theme.end_info.enable</code><br>上面這段的意思是: 如果 theme 的 config 檔中， end_info 設定裡的 enable 值為 True 時啟用。<br>其中， theme 在 <code>root\config.yml</code> 中已設定為 next ，所以他會直接到 <code>root\_config.next.yml</code> 尋找 end_info 的設定值。</p>
</li>
</ol>
<h3 id="從-theme-config-中抓取資料"><a href="#從-theme-config-中抓取資料" class="headerlink" title="從 theme config 中抓取資料"></a>從 theme config 中抓取資料</h3><p>從 theme config 裡 end_info 設定中抓取不同項目的值。參考進階版第二步驟的設定項目。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;theme.end_info.start_info&#125;&#125;</span><br><span class="line">&#123;&#123;theme.end_info.icon &#125;&#125;</span><br><span class="line">&#123;&#123;theme.end_info.end_info&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CSS-樣式設定"><a href="#CSS-樣式設定" class="headerlink" title="CSS 樣式設定"></a>CSS 樣式設定</h3><p>在 style&#x3D;”” 中填入 CSS 樣式，可自行搜尋可填入的值或其他樣式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div style=&quot;text-align:center; color:#ccc; font-size:14px; letter-spacing:5px&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>對齊方式(text-align)  </li>
<li>字體顏色(color)  </li>
<li>字體大小(font-size)  </li>
<li>字元間距(letter-spacing)</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Nunjucks</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>驗證三角形</title>
    <url>/posts/dca3ad45/</url>
    <content><![CDATA[<p><strong>題目來源:</strong> Alpha Camp 學期一作業<br>學期一終於結束了，完成了課程決定挑戰選修的期末考來驗收學習成效， JavaScript 題目一如既往地燒腦有挑戰性，從前老愛跟數讀死槓的我超開心呀!! 寫出來爆有成就感啊!!</p>
<span id="more"></span>
<h2 id="解題工具"><a href="#解題工具" class="headerlink" title="解題工具"></a>解題工具</h2><ol>
<li>if statement  </li>
<li>prompt() 可以接受使用者的輸入，但回傳值為字串。  </li>
<li>Number() 可以將輸入的參數轉換為數值。如果參數沒辦法被轉換成數字，則它會回傳 NaN 。</li>
</ol>
<h2 id="基本題"><a href="#基本題" class="headerlink" title="基本題"></a>基本題</h2><h3 id="題目要求"><a href="#題目要求" class="headerlink" title="題目要求"></a>題目要求</h3><ol>
<li>請使用者分別輸入三角形的3個邊長  </li>
<li>幫助使用者確認「給定的三個邊長組成的三角形，是等邊、等腰還是不等邊三角形」</li>
</ol>
<h3 id="解題過程"><a href="#解題過程" class="headerlink" title="解題過程"></a>解題過程</h3><p><strong>大致流程為:</strong>  </p>
<ol>
<li>請使用者分別輸入三角形的3個邊長。  </li>
<li>判斷三角形是否成立?  </li>
<li>如果三角形成立，則判斷三角形種類。  </li>
<li>輸出結果。</li>
</ol>
<p><strong>流程虛擬碼</strong><br>依照上述流程，可以將虛擬碼依照思考邏輯寫出來，方便後續編寫程式碼。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用者輸入三角形邊長</span><br><span class="line">IF 三角形成立(兩邊和需大於第三邊 &amp;&amp; 兩邊差需小於第三邊)</span><br><span class="line">  IF 三邊等長</span><br><span class="line">    輸出:此為正三角形</span><br><span class="line">  ELSE IF 其中兩邊等長</span><br><span class="line">    輸出:此為等腰三角形</span><br><span class="line">  ELSE </span><br><span class="line">    輸出:此為不等邊三角形</span><br><span class="line">ELSE 輸出:三角形不成立</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 請使用者輸入三角形邊長</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Number</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;請輸入第一條三角形邊長 (a)&#x27;</span>))</span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">Number</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;請輸入第二條三角形邊長 (b)&#x27;</span>))</span><br><span class="line"><span class="keyword">let</span> c = <span class="title class_">Number</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;請輸入第三條三角形邊長 (c)&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><strong>接著要判斷三角形是否成立及三角形種類。</strong><br>因為直接把條件全部寫進 if&#x2F;else 判斷式會發現，整個判斷流程的程式碼非常冗長、不易閱讀，所以我先把判斷條件寫成 boolean 。後面整個 if&#x2F;else 判斷式只要 boolean 為 True 即可。(為了變數名稱還特別跑去查英文 😅)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三角形成立規則</span></span><br><span class="line"><span class="keyword">let</span> isTriangle = (a + b &gt; c) &amp;&amp; (b + c &gt; a) &amp;&amp; (a + c &gt; b)  <span class="comment">// 兩邊和需大於第三邊</span></span><br><span class="line">              &amp;&amp; (a - b &lt; c) &amp;&amp; (b - c &lt; a) &amp;&amp; (a - c &lt; b)  <span class="comment">// 兩邊差需小於第三邊</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三角形種類條件</span></span><br><span class="line"><span class="keyword">let</span> isEquilateralTriangle = (a === b) &amp;&amp; (b === c)             <span class="comment">// 正三角形</span></span><br><span class="line"><span class="keyword">let</span> isIsoscelesTriangle = (a === b) || (b === c) || (a === c)  <span class="comment">// 等腰三角形</span></span><br></pre></td></tr></table></figure>

<p><strong>判斷開始</strong><br>接下來只要將判斷式依照虛擬碼寫出來即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判斷開始</span></span><br><span class="line"><span class="keyword">if</span> (isTriangle) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isEquilateralTriangle) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`三邊長為(<span class="subst">$&#123;a&#125;</span>, <span class="subst">$&#123;b&#125;</span>, <span class="subst">$&#123;c&#125;</span>)，此為&quot;正三角形&quot;`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isIsoscelesTriangle) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`三邊長為(<span class="subst">$&#123;a&#125;</span>, <span class="subst">$&#123;b&#125;</span>, <span class="subst">$&#123;c&#125;</span>)，此為&quot;等腰三角形&quot;`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`三邊長為(<span class="subst">$&#123;a&#125;</span>, <span class="subst">$&#123;b&#125;</span>, <span class="subst">$&#123;c&#125;</span>)，此為&quot;不等邊三角形&quot;`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`三邊長為(<span class="subst">$&#123;a&#125;</span>, <span class="subst">$&#123;b&#125;</span>, <span class="subst">$&#123;c&#125;</span>)，三角形不成立!!`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h2 id="進階題"><a href="#進階題" class="headerlink" title="進階題"></a>進階題</h2><h3 id="題目要求-1"><a href="#題目要求-1" class="headerlink" title="題目要求"></a>題目要求</h3><ol>
<li>在三邊之和小於等於 20 的情況下，找出所有的等腰三角形（不含正三角形）組合。  </li>
<li>輸出結果及等腰三角形數量</li>
</ol>
<h3 id="解題過程-1"><a href="#解題過程-1" class="headerlink" title="解題過程"></a>解題過程</h3><p><strong>大致流程為:</strong>  </p>
<ol>
<li>迴圈產出三角形邊長(其中兩邊等長)  </li>
<li>判斷三角形成立  </li>
<li>排除三邊之和大於20或正三角形  </li>
<li>輸出結果</li>
</ol>
<p><strong>先寫出虛擬碼</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">宣告找到等腰三角形起始組數為0</span><br><span class="line"></span><br><span class="line">for 迴圈產出等腰邊長(1 &lt;= a &lt;= 9)</span><br><span class="line">  for 迴圈產出第3邊長(1 &lt;= c &lt;= 9)</span><br><span class="line">    宣告條件變數(三角形成立 &amp;&amp; 三邊之和大於20，並排除正三角形)</span><br><span class="line">    if 條件成立</span><br><span class="line">      輸出等腰三角形邊長</span><br><span class="line">      找到等腰三角形組數 +1</span><br><span class="line">    else 跳過</span><br><span class="line">  跳出迴圈</span><br><span class="line">跳出迴圈</span><br><span class="line">輸出找到等腰三角形的總組數</span><br></pre></td></tr></table></figure>

<p><strong>接著設定條件: 三角形成立、三邊之和大於20，並排除正三角形。</strong>  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isTriangle = (a + a &gt; c) &amp;&amp; (a + c &gt; a) &amp;&amp; (a + c &gt; a)  <span class="comment">// 兩邊和小於第三邊</span></span><br><span class="line">              &amp;&amp; (a - a &lt; c) &amp;&amp; (a - c &lt; a) &amp;&amp; (a - c &lt; a)  <span class="comment">// 兩邊差大於第三邊</span></span><br><span class="line"><span class="keyword">let</span> isIsoscelesTriangle = (a + a + c &lt;= <span class="number">20</span>) &amp;&amp; (a !== c)    <span class="comment">// 三邊之和大於20，並排除正三角形</span></span><br></pre></td></tr></table></figure>

<p><strong>寫出 for 迴圈及判斷式</strong>  </p>
<ol>
<li>因為等腰三角形 (a &#x3D;&#x3D;&#x3D; b) ，所以不另外設變數 b ，直接以 a 取代。  </li>
<li>讓 a 、 c 從小往大迭代，避免重複情況發生。  </li>
<li>迭代產出三邊長 (a, a, c) 後進入條件判斷。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找到等腰三角形起始組數為0</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 迴圈開始</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a = <span class="number">1</span>; a &lt;= <span class="number">9</span> ; a++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> c = <span class="number">1</span>; c &lt;= <span class="number">9</span> ; c++) &#123;</span><br><span class="line">    <span class="comment">// 設置條件</span></span><br><span class="line">    <span class="keyword">let</span> isTriangle = (a + a &gt; c) &amp;&amp; (a + c &gt; a) &amp;&amp; (a + c &gt; a)  <span class="comment">// 兩邊和小於第三邊</span></span><br><span class="line">                  &amp;&amp; (a - a &lt; c) &amp;&amp; (a - c &lt; a) &amp;&amp; (a - c &lt; a)  <span class="comment">// 兩邊差大於第三邊</span></span><br><span class="line">    <span class="keyword">let</span> isIsoscelesTriangle = (a + a + c &lt;= <span class="number">20</span>) &amp;&amp; (a !== c)    <span class="comment">// 三邊之和大於20，並排除正三角形</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判斷開始</span></span><br><span class="line">    <span class="keyword">if</span> (isTriangl &amp;&amp; isIsoscelesTriangle) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`發現等腰三角形，三邊長分別為 (<span class="subst">$&#123;a&#125;</span>, <span class="subst">$&#123;a&#125;</span>, <span class="subst">$&#123;c&#125;</span>) `</span>)</span><br><span class="line">      count++</span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`共找到<span class="subst">$&#123;count&#125;</span>組等腰三角形!`</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript 解題</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AlphaCamp</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NexT 主題更新</title>
    <url>/posts/dbd33422/</url>
    <content><![CDATA[<blockquote>
<p>本篇撰寫時 Hexo 及 NexT 版本如下，不同版本可能會有功能或設定方式上的差異!<br>Hexo 版本: hexo: 6.0.0<br>Next 版本: hexo-theme-next-<strong>8.8.2</strong> 升級到 <strong>8.9.0</strong></p>
</blockquote>
<span id="more"></span>
<p>NexT 官方團隊在收集一定數量 Bugfix &#x2F; Feature Request 的情況下，原則上會每月更新一次，可以先參考官方公布的版本更新內容再決定要不要更新。  </p>
<p>不過，更新通常是為了優化(<code>custom_file_path</code> 真的讓主題更新方便很多)、排除障礙或提高安全性，理論上可以有更好的使用體驗，所以如果有更新提醒我應該還是會盡快處理。  </p>
<p>另外，隨著技術的進步，舊有的方式可能會被淘汰(像是以前的 <code>.swig</code> 已被 <code>.njk</code> 替代)，為了避免跨大版本更新造成需要大幅度調整的麻煩，建議更新頻率不要太低。  </p>
<h2 id="近年-NexT-主題大改革"><a href="#近年-NexT-主題大改革" class="headerlink" title="近年 NexT 主題大改革"></a>近年 NexT 主題大改革</h2><p>如果查詢網路上較久以前的教學文章，會發現很多東西都跟新版本搭不起來了。以我自己建置部落格的過程和踩過的坑，感覺最大的變化如下:  </p>
<p><strong>1. Custom Files 用法(v7.3.0 啟用)</strong><br>以前要把 NexT 主題改得更有個人風格(ex.改背景、在文章底部加文字、增減頁腳文字…等)，都需要改動 <code>layout</code> 資料夾裡相對應的檔案原始碼。一旦進行版本更新，原本作好的設定被直接覆蓋，造成很多困擾。  </p>
<p>自啟用 Custom Files 用法後，所有的程式碼修改一律放在 <code>root\source\_data</code> 資料夾裡，只要到 <code>root\_config.next.yml</code> 設定讀取路徑就可以直接套用。因為設定檔不是放在主題資料夾內，就算版本更新也不造成影響。   </p>
<p><strong>2. Nunjucks 引擎(v7.4.2 啟用)</strong><br>網路上較久以前的教學文章，都會說要修改 <code>.swig</code> 檔，但我找半天都找不到，後來看官方文件才發現，因為 swig 缺乏维護，NexT 自 v7.4.2 開始，改用 Nunjucks 代替 swig 作为模版引擎，檔案類型變成 <code>.njk</code> ，網路上的教學文章已不適用。</p>
<h2 id="npm-安裝-官方推薦"><a href="#npm-安裝-官方推薦" class="headerlink" title="npm 安裝(官方推薦)"></a>npm 安裝(官方推薦)</h2><p><strong>主題資料夾位置: <code>root\node_modules\hexo-theme-next</code></strong><br>打開 <code>root\node_modules</code> 資料夾會發現，之前用 npm 安裝的各種插件都在這裡面。原則上這個資料夾的東西都不會手動修改，只用 npm 指令處理，後續用 npm 更新或解除安裝基本都是改動這裡。  </p>
<p>NexT 主題更新只要進到 Blog 的根目錄擇一執行以下指令即可。  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next           <span class="comment"># 默認最新版本</span></span><br><span class="line">npm install hexo-theme-next@latest    <span class="comment"># 安裝最新版本</span></span><br><span class="line">npm install hexo-theme-next@8.9.0     <span class="comment"># 安裝指定版本</span></span><br></pre></td></tr></table></figure>

<p>更新完成後，參考更新說明。如果有想用的新功能，直接在 <code>root\_config.next.yml</code> 修改設定即可。</p>
<blockquote>
<p>如果沒有這個檔案，請參考<a href="/posts/ebe0f18a/">Hexo NexT 主題變更 &amp; 設定 </a> 章節 4.1 說明。</p>
</blockquote>
<h2 id="git-安裝-太久沒更新推薦"><a href="#git-安裝-太久沒更新推薦" class="headerlink" title="git 安裝(太久沒更新推薦)"></a>git 安裝(太久沒更新推薦)</h2><p><strong>主題資料夾位置: <code>root\themes\主題名稱資料夾</code></strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 根目錄</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>
<p>我剛開始使用 NexT 主題時是使用這種方式(<del>因為搞不懂 npm 指令到底在背後執行什麼</del>)。看了各種網路教學作個人化設定，改動了不少 NexT 主題原始碼，然後因為跟 git 不熟，不小心整個覆蓋掉，整個重來得很崩潰(跑題了)。後來使用 npm 安裝各種插件習慣，且啟用 <code>custom_file_path</code> 後，覺得 npm 方式比較方便。  </p>
<p><strong>git 安裝推薦使用對象:</strong><br><strong>1. 有改動 NexT 主題原始碼，不想直接覆蓋的人。</strong><br>使用 <code>git pull</code> 等方式更新合併，主題必須加入版本控制。鑒於目前我跟 Git 還是很不熟，這裡就不多作說明。<br><strong>2. 太久沒更新，直接覆蓋可能會出現很多問題，需要大量調整的人。</strong><br>使用這種方法的人，可以在資料夾後加版本編號作新舊版區隔，等調整完成後，在 <code>root\_config.yml</code> 設定要套用哪個版本就可以了。  </p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 插件更新</title>
    <url>/posts/d81b71f/</url>
    <content><![CDATA[<p>會寫這篇文章主要是因為收到了 hexo-server 插件的更新通知。隨著部落格功能的擴充，我安裝的 Hexo 插件越來越多，每個插件都會做各自的版本更新(還不同時間點)。一個一個分別更新好麻煩，然後懶人如我找到了個 npm 包可以直接幫我確認最新版本，再全部一起更新，多棒啊~~  </p>
<span id="more"></span>

<blockquote>
<p>本篇撰寫時 Hexo 版本如下，不同版本可能會有功能或設定方式上的差異!<br>Hexo 版本: hexo: 6.0.0<br>Hexo-server 版本: <strong>^2.0.0</strong> 升級到 <strong>^3.0.0</strong>  </p>
</blockquote>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>package.json 檔案， 定義專案所需要的各種模組，以及專案的配置資訊。<code>npm install</code> 命令根據這個配置檔案，自動下載所需的模組。打開 Hexo 專案根目錄的 package.json 檔案，就可以看到自己已經做了那些配置。  </p>
<p>關於 package.json 的詳細介紹，可參考 <a href="https://iter01.com/467432.html">草履蟲的思考 發表在 IT 人的文章</a>。裡面對 npm 及 package.json 有比較詳細的介紹，這裡就不贅述。</p>
<h2 id="用-npm-check-updates-更新插件"><a href="#用-npm-check-updates-更新插件" class="headerlink" title="用 npm-check-updates 更新插件"></a>用 npm-check-updates 更新插件</h2><p>在網路教學看到推薦用 <code>npm-check</code> 和 <code>npm-upgrade</code> 更新，但我實際安裝後都會報錯誤。後來我找到另外 npm 包，也是我這次更新 hexo-server 用的方式。  </p>
<blockquote>
<p><a href="https://github.com/raineorshine/npm-check-updates">npm-check-updates 官網</a><br><strong>npm-check-updates</strong> upgrades your package.json dependencies to the latest versions, ignoring specified versions.<br>看看這描述，多方便阿~</p>
</blockquote>
<p><strong>1. 使用方法非常簡單，只要先安裝 npm-check-updates</strong> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm-check-updates    <span class="comment"># 安裝 npm-check-updates</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 執行版本檢查&#x2F;更新指令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ncu           <span class="comment"># 檢查是否需要更新(npm-check-updates 第一個字母縮寫，很好記!)</span></span><br><span class="line">ncu -u        <span class="comment"># 更新 package.json 資訊(upgrade縮寫)</span></span><br><span class="line">npm install   <span class="comment"># 安裝新版本</span></span><br></pre></td></tr></table></figure>
<p>他會輸出一個版本檢查的畫面，並在最後一行指示下一步怎麼做。以我自己的畫面為例:  </p>
<ul>
<li>執行 <code>ncu</code> 會提供現有版本和最新版本的比較，並在最後一行用藍字提醒下一步要 更新 package.json。  </li>
<li>執行 <code>ncu -u</code> 更新 package.json 資訊，並在最後一行用藍字提醒下一步要安裝新版本。  </li>
<li>執行 <code>npm install</code> 後 再用 <code>ncu</code> 檢查一次，發現全部都是最新版本了。</li>
</ul>
<p><img src="/../../Blog-image/posts/2022-01-06_001.webp" alt="npm-check-updates20220106-001"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>星座計算機</title>
    <url>/posts/2fe737b2/</url>
    <content><![CDATA[<p><strong>題目來源:</strong> Alpha Camp 學期 2-1 工作坊<br>在學習 function 的過程中，對於如何設計和應用只有模糊的概念。星座計算機是個規模較小的應用題，可以在不長的流程中清楚看出 fuction 的運作時機和傳回值的流向。透過 function 的使用，可以讓主程式碼盡可能地保持較乾淨的狀態。  </p>
<span id="more"></span>

<h2 id="解題工具"><a href="#解題工具" class="headerlink" title="解題工具"></a>解題工具</h2><ol>
<li>if statement  </li>
<li>function  </li>
<li>for 迭代</li>
<li>String.prototype.split(): 用特定字符將字串切割，並回傳切割後陣列。</li>
<li>Number(): 將 () 中參數型別轉換為數字。</li>
</ol>
<h2 id="題目要求"><a href="#題目要求" class="headerlink" title="題目要求"></a>題目要求</h2><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><ul>
<li>給定一個日期(格式為 4&#x2F;1)，算出此日期對應星座。  </li>
<li>用 function 來創建資料。  </li>
<li>用 function 來簡化。  </li>
<li>(自己新增) 判斷輸入日期是否有誤(ex. 4&#x2F;35)。</li>
</ul>
<h3 id="課後挑戰–例外處理"><a href="#課後挑戰–例外處理" class="headerlink" title="課後挑戰–例外處理"></a>課後挑戰–例外處理</h3><p>摩羯座(12&#x2F;21 - 1&#x2F;19) 因為跨年度，和其他星座不同。試著分別用以下三種方式解決例外狀況。  </p>
<ol>
<li>專用判斷式 (大於1221 或 小於 119)  </li>
<li>排除法 (如果都沒找到，就是魔羯)  </li>
<li>改物件 (12&#x2F;21-12&#x2F;31 、 1&#x2F;1-1&#x2F;19)</li>
</ol>
<h2 id="解題過程"><a href="#解題過程" class="headerlink" title="解題過程"></a>解題過程</h2><p>原本看到題目的直覺反應是:  </p>
<ol>
<li>把使用者輸入的生日拆解成 “月” 和 “日” 兩個變數。  </li>
<li>把星座區間分成前後兩半(前月中到月底 + 後月初到月中)。  </li>
<li>用雙層 for 迴圈迭代 “月” 和 “日” ，將星座前、後兩半分別檢查一次，找出生日符合的區間。</li>
</ol>
<p>整體流程感覺很繁瑣……這時，助教提出一個建議: <strong>將所有日期(月+日)整個數值化，讓星座區間的前後半合併為一個數值的區間</strong> (如天秤 9&#x2F;23-10&#x2F;22 轉換為 923-1022的數字區間)。這樣就方便很多了，也解決了跨月份造成的雙層迴圈問題。  </p>
<h3 id="拆解流程"><a href="#拆解流程" class="headerlink" title="拆解流程"></a>拆解流程</h3><blockquote>
<ul>
<li>先思考整體大方向，寫出流程 1 ~ 5 大項。  </li>
<li>防呆措施: 加入 “判斷日期是否存在?” 功能。(加入流程3-1)  </li>
<li>如果比較 “月” 再比較 “日” ，判斷流程較繁複，所以轉換日期方便比較。 (加入流程3-2)  </li>
<li>依照題意用 function 簡化，預計分別為 1 、 3-1 、 3-2 設計 function 。</li>
</ul>
</blockquote>
<ol>
<li>建立星座資料  </li>
<li>使用者輸入生日  </li>
<li>拆解日期<br>3-1. 判斷日期是否存在?<br>3-2. 轉換日期以簡化判斷星座過程  </li>
<li>判斷星座  </li>
<li>輸出星座</li>
</ol>
<h3 id="解題開始"><a href="#解題開始" class="headerlink" title="解題開始"></a>解題開始</h3><blockquote>
<p>在進行解題時，寫出上述運作流程後，我會先進行一次反向思考。  </p>
<ol>
<li>星座判斷流程需要用到數值化後的日期 ➜ 從 function 日期數值化取得。  </li>
<li>判斷日期是否存在 及 function 日期數值化需要用「月」、「日」來轉換 ➜ 建立星座資料、使用者輸入資料都要將「月」、「日」拆開。</li>
<li>依照以上所需來設計變數代入 function 及其他解題流程裡。</li>
</ol>
</blockquote>
<h4 id="function-設計"><a href="#function-設計" class="headerlink" title="function 設計"></a>function 設計</h4><p>經過前面的流程拆解，可以開始設計 function 了。<br><strong>1. 日期數值化(將 9&#x2F;23 轉換為 923)</strong><br>   回傳值為: 將傳入的參數 m(月) 乘 100 再加 d(日)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// convert dateValue = month * 100 + date</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dateValue</span>(<span class="params">m, d</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> m * <span class="number">100</span> + d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2. 建立星座資料</strong><br>   日期數值化需要分別用到月和日，因此在設計 function 時，需要的參數有: 星座名、起始月、起始日、結束月、結束日。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create Object for zodiac</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createZodiac</span>(<span class="params">name, startMonth, startDay, endMonth, endDay</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">startDate</span>: <span class="title function_">dateValue</span>(startMonth, startDay),</span><br><span class="line">    <span class="attr">endDate</span>: <span class="title function_">dateValue</span>(endMonth, endDay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3. 判斷日期是否存在?</strong><br>   判斷標準為: 2月最多29天，2月外小月最多30天，大月最多31天。<br>   功能: 日期存在則回傳日期，日期不存在則印出日期不存在。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dateExist</span>(<span class="params">m, d</span>) &#123;</span><br><span class="line">  <span class="comment">// set date exist range</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Feb</span> = (d &lt;= <span class="number">29</span>)</span><br><span class="line">  <span class="keyword">const</span> bigMonth = ((m &lt;= <span class="number">7</span>) &amp;&amp; (m % <span class="number">2</span> !== <span class="number">0</span>) || (m &gt; <span class="number">7</span>) &amp;&amp; (m % <span class="number">2</span> === <span class="number">0</span>)) &amp;&amp; (d &lt;= <span class="number">31</span>)</span><br><span class="line">  <span class="keyword">const</span> smallMonth = (m !== <span class="number">2</span>) &amp;&amp; ((m &lt;= <span class="number">7</span>) &amp;&amp; (m % <span class="number">2</span> === <span class="number">0</span>) || (m &gt; <span class="number">7</span>) &amp;&amp; (m % <span class="number">2</span> !== <span class="number">0</span>)) &amp;&amp; (d &lt;= <span class="number">30</span>)</span><br><span class="line">  <span class="comment">// start</span></span><br><span class="line">  <span class="keyword">if</span> ((d &gt;= <span class="number">1</span>) &amp;&amp; (<span class="title class_">Feb</span> || bigMonth || smallMonth)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dateValue</span>(m, d)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;生日不存在&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="三種方式共同流程"><a href="#三種方式共同流程" class="headerlink" title="三種方式共同流程"></a>三種方式共同流程</h4><p><strong>1. 建立星座資料</strong><br>方式一、方式二都是將摩羯座當例外處理，因此這邊先不建立摩羯座資料。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// place to store info from function &#x27;createZodiac&#x27;</span></span><br><span class="line"><span class="keyword">const</span> zodiac = []</span><br><span class="line"><span class="comment">// use &#x27;createZodiac&#x27; push into zodiac</span></span><br><span class="line">zodiac.<span class="title function_">push</span>(<span class="title function_">createZodiac</span>(<span class="string">&#x27;牡羊&#x27;</span>, <span class="number">3</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">19</span>))</span><br><span class="line">zodiac.<span class="title function_">push</span>(<span class="title function_">createZodiac</span>(<span class="string">&#x27;金牛&#x27;</span>, <span class="number">4</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">20</span>))</span><br><span class="line">zodiac.<span class="title function_">push</span>(<span class="title function_">createZodiac</span>(<span class="string">&#x27;雙子&#x27;</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">20</span>))</span><br><span class="line">zodiac.<span class="title function_">push</span>(<span class="title function_">createZodiac</span>(<span class="string">&#x27;巨蟹&#x27;</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">22</span>))</span><br><span class="line">zodiac.<span class="title function_">push</span>(<span class="title function_">createZodiac</span>(<span class="string">&#x27;獅子&#x27;</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">8</span>, <span class="number">22</span>))</span><br><span class="line">zodiac.<span class="title function_">push</span>(<span class="title function_">createZodiac</span>(<span class="string">&#x27;處女&#x27;</span>, <span class="number">8</span>, <span class="number">23</span>, <span class="number">9</span>, <span class="number">22</span>))</span><br><span class="line">zodiac.<span class="title function_">push</span>(<span class="title function_">createZodiac</span>(<span class="string">&#x27;天秤&#x27;</span>, <span class="number">9</span>, <span class="number">23</span>, <span class="number">10</span>, <span class="number">22</span>))</span><br><span class="line">zodiac.<span class="title function_">push</span>(<span class="title function_">createZodiac</span>(<span class="string">&#x27;天蠍&#x27;</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">21</span>))</span><br><span class="line">zodiac.<span class="title function_">push</span>(<span class="title function_">createZodiac</span>(<span class="string">&#x27;射手&#x27;</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">21</span>))</span><br><span class="line">zodiac.<span class="title function_">push</span>(<span class="title function_">createZodiac</span>(<span class="string">&#x27;水瓶&#x27;</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">18</span>))</span><br><span class="line">zodiac.<span class="title function_">push</span>(<span class="title function_">createZodiac</span>(<span class="string">&#x27;雙魚&#x27;</span>, <span class="number">2</span>, <span class="number">19</span>, <span class="number">3</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure>

<p><strong>2. 使用者輸入生日</strong>  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user input</span></span><br><span class="line"><span class="keyword">const</span> birthday = <span class="title function_">prompt</span>(<span class="string">&#x27;請輸入生日(格式:4/1): &#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>3. 拆解日期</strong>  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> birthdayArray = birthday.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> birthdayMonth = <span class="title class_">Number</span>(birthdayArray[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">const</span> birthdayDay = <span class="title class_">Number</span>(birthdayArray[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">const</span> birthdayValue = <span class="title function_">dateExist</span>(birthdayMonth, birthdayDay)</span><br></pre></td></tr></table></figure>

<p>以上部分完成後，就可以依照三種方式分別進行判斷星座 &amp; 輸出結果了(<a href="#%E6%96%B9%E5%BC%8F%E4%B8%80">方式一</a>、<a href="#%E6%96%B9%E5%BC%8F%E4%BA%8C">方式二</a>、<a href="#%E6%96%B9%E5%BC%8F%E4%B8%89">方式三</a>)。</p>
<h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p><strong>說明: 幫摩羯座設專用判斷式 (大於1221 或 小於 119)</strong><br>先用專用判斷式把摩羯座篩選出來，其他的則丟進迴圈裡迭代，找出符合的結果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((birthdayValue &lt;= <span class="number">119</span>) || (birthdayValue &gt;= <span class="number">1221</span>)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你是魔羯座&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; zodiac.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> startValue = zodiac[i].<span class="property">startDate</span></span><br><span class="line">    <span class="keyword">const</span> endValue = zodiac[i].<span class="property">endDate</span></span><br><span class="line">    <span class="keyword">if</span> ((birthdayValue &gt;= startValue) &amp;&amp;(birthdayValue &lt;= endValue)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你是<span class="subst">$&#123;zodiac[i].name&#125;</span>座`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="#%E4%B8%89%E7%A8%AE%E6%96%B9%E5%BC%8F%E5%85%B1%E5%90%8C%E6%B5%81%E7%A8%8B">(回到共同流程)</a>  </p>
<h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p><strong>說明: 排除法 (如果都沒找到，就是魔羯)</strong><br>這個方法讓我卡最久……我的邏輯是: 如果迴圈有找到符合的結果，則印出結果； 如果沒有，則印出 ‘你是摩羯座’。<br>這種方法忽略了生日不存在的狀況，導致如果生日不存在，會同時印出 ‘生日不存在’ 及 ‘你是摩羯座’。<br>最後才想到加個 “如果 birthdayValue 有值” 的前提，成功跑出我要的結果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> answer = []</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; zodiac.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> ((birthdayValue &gt;= zodiac[i].<span class="property">startDate</span>) &amp;&amp; (birthdayValue &lt;= zodiac[i].<span class="property">endDate</span>)) &#123;  </span><br><span class="line">    answer.<span class="title function_">push</span>(zodiac[i].<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (birthdayValue) &#123;  <span class="comment">// 如果 birthdayValue 有值</span></span><br><span class="line">  <span class="keyword">if</span> (answer.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你是<span class="subst">$&#123;answer[<span class="number">0</span>]&#125;</span>座`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你是摩羯座&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="#%E4%B8%89%E7%A8%AE%E6%96%B9%E5%BC%8F%E5%85%B1%E5%90%8C%E6%B5%81%E7%A8%8B">(回到共同流程)</a>  </p>
<h4 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h4><p><strong>方式說明:改物件 (12&#x2F;21-12&#x2F;31 、 1&#x2F;1-1&#x2F;19)</strong><br>須把摩羯座範圍拆開，並另外放進 zodiac 裡。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把摩羯座拆開放進 zodiac 裡</span></span><br><span class="line">zodiac.<span class="title function_">push</span>(<span class="title function_">createZodiac</span>(<span class="string">&#x27;魔羯&#x27;</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">12</span>, <span class="number">31</span>))</span><br><span class="line">zodiac.<span class="title function_">push</span>(<span class="title function_">createZodiac</span>(<span class="string">&#x27;魔羯&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">19</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; zodiac.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> startValue = zodiac[i].<span class="property">startDate</span></span><br><span class="line">  <span class="keyword">const</span> endValue = zodiac[i].<span class="property">endDate</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (birthdayValue &gt;= startValue &amp;&amp; birthdayValue &lt;= endValue) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你是<span class="subst">$&#123;zodiac[i].name&#125;</span>座`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="#%E4%B8%89%E7%A8%AE%E6%96%B9%E5%BC%8F%E5%85%B1%E5%90%8C%E6%B5%81%E7%A8%8B">(回到共同流程)</a></p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>能成功用三種方法解出來實在很有成就感! 每次看到輸出結果跑出紅字就很頭大，還好他會提醒你到底是哪裡出錯，所以做後還是成功 debug 了!  </p>
<p>隨著作業規模變大，開始有感覺到難度。但是比起挫折感，更多的反而是 “我在確實進步” 的興奮!! 讓我在寫部落格的路上越來越有動力!</p>
]]></content>
      <categories>
        <category>JavaScript 解題</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AlphaCamp</tag>
      </tags>
  </entry>
  <entry>
    <title>簡易 RPG 戰鬥：攻擊與補血</title>
    <url>/posts/23e46325/</url>
    <content><![CDATA[<p><strong>題目來源:</strong> Alpha Camp 學期 2-1<br>題目的主要目的是 Javascript function 的練習。設計 function 的運作方式，利用 <code>if</code> + <code>return</code> 來控制需要提早跳出函式的情況，及使用 <code>this</code> 取到物件自身。  </p>
<span id="more"></span>
<p>題目原本僅要求專注在 <strong>攻擊(attack)</strong> 和 <strong>治療(cure)</strong> function 的撰寫，其餘流程已由原題目提供。但基於再次練習的目的，且題目其餘部分也是由學過的 while 迴圈組成，所以這次練習會從頭把整個流程寫出來。  </p>
<h2 id="解題工具"><a href="#解題工具" class="headerlink" title="解題工具"></a>解題工具</h2><ol>
<li>function 函式  </li>
<li>while 迴圈  </li>
<li>if statement</li>
</ol>
<h2 id="題目要求"><a href="#題目要求" class="headerlink" title="題目要求"></a>題目要求</h2><ol>
<li>預設戰士 <code>hp</code> 為 100、 <code>mp</code> 為 30；魔法師 <code>hp</code> 為 30、 <code>mp</code> 為 100。</li>
<li>由魔法師先攻，若有任一方死掉，則遊戲結束，不能再有補血或攻擊動作；反之，若兩個角色都活著，則遊戲可一直正常執行，直到一方死掉。  </li>
<li>攻擊者會呼叫 <code>attack()</code> 攻擊敵方，產生 1~100 點之間隨機點數的傷害。  </li>
<li>若被攻擊方沒有死，則會呼叫 <code>cure()</code> 為自己補血，補血規格為：每次補血固定為 15 點 <code>hp</code> 、每補充 1 點 <code>hp</code> 需要 2 點 <code>mp</code>。補血結束後攻守交換。  </li>
<li><code>cure()</code> 會傳入一個參數為 <code>hp</code> ，指的是想要補充的 <code>hp</code> 。  </li>
<li>補血可以補超過原有的 <code>hp</code>，沒有 <code>hp</code> 最大值上限，只要有 <code>mp</code> 都可以補血。  <blockquote>
<p>原題目是由戰士先攻，但為了方便觀察輸出結果，改由魔法師先攻。</p>
</blockquote>
</li>
</ol>
<h2 id="解題過程"><a href="#解題過程" class="headerlink" title="解題過程"></a>解題過程</h2><h3 id="拆解流程"><a href="#拆解流程" class="headerlink" title="拆解流程"></a>拆解流程</h3><ol>
<li>創建角色(含 <code>name</code> 、 <code>hp</code> 、 <code>mp</code> 、<code>attack()</code> 及 <code>cure()</code> )  </li>
<li>戰鬥流程  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 戰士及魔法師都活著</span><br><span class="line">  則魔法師先攻、戰士師補血(補血是否執行由函式決定)</span><br><span class="line">  <span class="keyword">if</span> 戰士還活著</span><br><span class="line">    則戰士攻擊、魔法師補血(補血是否執行由函式決定)</span><br><span class="line">任一方死掉，則遊戲結束。</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="解題開始"><a href="#解題開始" class="headerlink" title="解題開始"></a>解題開始</h3><h4 id="function-設計"><a href="#function-設計" class="headerlink" title="function 設計"></a>function 設計</h4><ol>
<li><p>攻擊動作 attack()  </p>
<ul>
<li>產生攻擊點數、輸出攻擊資訊  </li>
<li>結果1(打死): 輸出”對手死亡”  </li>
<li>結果2(沒打死): 輸出”對手活著”，且對手啟動cure()  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">attack</span> (enemy) &#123;</span><br><span class="line">  hpLose = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> hit <span class="subst">$&#123;enemy.name&#125;</span>, <span class="subst">$&#123;enemy.name&#125;</span> lose <span class="subst">$&#123;hpLose&#125;</span> HP.`</span>)</span><br><span class="line">  enemy.<span class="property">hp</span> -= hpLose</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (enemy.<span class="property">hp</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;enemy.name&#125;</span> is dead.\n`</span>)</span><br><span class="line">    <span class="keyword">return</span> enemy.<span class="property">hp</span> = <span class="number">0</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;enemy.name&#125;</span> is still alive. (HP = <span class="subst">$&#123;enemy.hp&#125;</span>)`</span>)</span><br><span class="line">    enemy.<span class="title function_">cure</span>(<span class="number">15</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>治療動作 cure()  </p>
<ul>
<li>結果1(mp夠): 啟動治療並輸出治療結果  </li>
<li>結果2(mp不夠): 不治療繼續  </li>
<li>攻守互換  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cure</span> (hp) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">mp</span> &gt;= (hp * <span class="number">2</span>)) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hp</span> += hp</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mp</span> -= hp * <span class="number">2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> recovered. (HP = <span class="subst">$&#123;<span class="variable language_">this</span>.hp&#125;</span>；MP = <span class="subst">$&#123;<span class="variable language_">this</span>.mp&#125;</span>)`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MP isn&#x27;t enough! <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> cannot use cure.`</span>)</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\n-------------- Change Side ---------------`</span>)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>角色建立 player()  </p>
<ul>
<li>需含名稱、HP、MP、攻擊動作、治療動作  </li>
<li>練習不同的 function 使用方式(把 function 放進 function 裡)  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">player</span> (name, hp, mp) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">hp</span>: hp,</span><br><span class="line">    <span class="attr">mp</span>: mp,</span><br><span class="line">    <span class="attr">cure</span>: <span class="keyword">function</span> (<span class="params">hp</span>) &#123;......&#125;,</span><br><span class="line">    <span class="attr">attack</span>: <span class="keyword">function</span> (<span class="params">enemy</span>) &#123;......&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h4 id="解題流程"><a href="#解題流程" class="headerlink" title="解題流程"></a>解題流程</h4><ol>
<li>創建並輸出角色資料  </li>
<li>戰鬥開始(迴圈內容)  <ul>
<li>如果兩人都活著，則戰鬥開始，魔術師先攻，回合結束  </li>
<li>如果上回合戰士還活著，則攻守交換  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create players</span></span><br><span class="line"><span class="keyword">const</span> warrior = <span class="title function_">player</span>(<span class="string">&#x27;Warrior&#x27;</span>, <span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line"><span class="keyword">const</span> magician = <span class="title function_">player</span>(<span class="string">&#x27;Magician&#x27;</span>, <span class="number">30</span> ,<span class="number">100</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(warrior)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(magician)</span><br><span class="line"></span><br><span class="line"><span class="comment">// start fight</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------- Start Fight ---------------&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> (warrior.<span class="property">hp</span> &gt; <span class="number">0</span> &amp;&amp; magician.<span class="property">hp</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  magician.<span class="title function_">attack</span>(warrior)</span><br><span class="line">  <span class="keyword">if</span> (warrior.<span class="property">hp</span> &gt; <span class="number">0</span>) &#123;    </span><br><span class="line">    warrior.<span class="title function_">attack</span>(magician)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------------- Game Over ----------------&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>在重寫的過程中又發現了一些自己不熟的地方……寫物件的時候，居然把 key 跟 value 中間的 <code>:</code> 寫成 <code>=</code> 了!  </p>
<p>這題練習對我其實滿有效的，包含 <code>this</code> 跟 <code>return</code> 的使用時機，還有在函式裡呼叫函式的寫法(這部分讓我把 while 迴圈大改，在被攻擊的對象還活著的時候直接呼叫治療函式)。以自己覺得順暢的方式改完後，發現還是可以順利跑出相同結果，表示 function 目前的課程應該有一定程度的熟悉了!</p>
]]></content>
      <categories>
        <category>JavaScript 解題</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AlphaCamp</tag>
      </tags>
  </entry>
  <entry>
    <title>Alpha Camp 學期 2-1 結業心得</title>
    <url>/posts/73279419/</url>
    <content><![CDATA[<p><em><strong>學習的過程充滿挑戰，成功闖過之後就想做更多的挑戰!</strong></em><br>這大概就是我在這階段完課後，最明顯的感受。  </p>
<span id="more"></span>

<p>有轉職意願後，我報名了學期一課程，想確認是否真的對程式語言有興趣。在將近一個月的課程接觸下，燃起了久違的學習熱情，隨後決定繼續向學期二邁進，將學期一碰到的 HTML&#x2F;CSS&#x2F;JavaScript 更精進。  </p>
<p>相較於學期一類似「興趣班」的節奏，學期 2-1 第一週開始接觸了陣列、物件及函式，不管是單週課程量或難度對我來說都有明顯變高的感覺，作業也變得更加「靈活」。學習過程需要花更多的時間理解、作業要花更多的時間思考，本來以為難度提高會帶來挫折感，進而降低學習熱情，結果相反，我最直觀的感受是「我能做到的事變多了」。課程作業藉著把摸彩活動分成小步驟完成，最後組合再一起，這種「把大任務變小」的方式，我覺得有效降低了學習期間的挫折感。  </p>
<p>再後來的 DOM 和事件驅動，就更多的提高我對 JavaScript 的學習興趣，藉由 DOM 就可以用 JavaScript 來操作寫好的 HTML，學到了讓使用者跟網頁互動的方法，。每一個章節作業做完的同時，開始會主動思考「可以加上什麼功能?」，有的成功、有的失敗，不知不覺坐在電腦前的時間越來越長😄  </p>
<p>說到這裡可能有人發現了…… CSS 呢?<br>是的，我對 CSS 一直還沒燃起足夠的熱情，花著同樣的時間進行學習，但 CSS 就是很難記住，寫起來很不順手。這種期況一直持續到學到 DOM 和事件驅動才有改善。在加上新功能後，我新加的東西在網頁上動起來<del>覺得自己有點厲害</del>但長得醜醜的，這時候才開始想各種辦法改善它，積極地回去複習排版…等語法。  </p>
<p>因為 JavaScript 想新加功能，所以積極複習、查資料、使用還沒學到的東西。因為覺得畫面醜醜的，所以重新面對興致不高的 CSS 。難怪人家都說，想進步最快的辦法就是去做各種 side project 。原本的期末作業「RGB 色碼轉 HEX」，看是要輸入 RGB 色碼或用 slider 調色只要二選一，最後輸出 HEX 結果即可。為了想讓三者同步，查了 <code>addEventListener</code> 的各種 event ，寫了整整一天，寫出來的當下很有成就感! <a href="https://ritachien.github.io/Convert-Between-RGB-HEX/">(動手試試看)</a>  </p>
<p><img src="https://github.com/ritachien/Convert-Between-RGB-HEX/blob/main/demo.gif?raw=true"></p>
<p>學習過程記錄大致就這樣了。<br>學期 2-1 找到了提高我學習動力的方法—-<strong>實作、實作、再實作</strong>。準備在春節期間開始挑戰 JS30，然後開始學期 2-2 的預讀。最後的最後，許個新年新希望: 我不要再當米蟲了阿~~~~~~ 今年一定要轉職成功阿~~~~~</p>
]]></content>
      <categories>
        <category>學習紀錄 - AlphaCamp</category>
      </categories>
      <tags>
        <tag>AlphaCamp</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML &amp;lt;audio&amp;gt; 標籤</title>
    <url>/posts/70fc7e3d/</url>
    <content><![CDATA[<p>為了增加網頁的互動性，有時候會想讓網頁發出聲音，這時候只要在 HTML 文件中加上 <code>&lt;audio&gt;</code> 標籤即可。  </p>
<span id="more"></span>
<blockquote>
<p>筆記內容為學習過程中的紀錄，內容可能未臻完善，內文可能也會隨著學習過程作增減或修改。<br>如有錯漏，歡迎留言，謝謝!</p>
</blockquote>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>self-closing: <strong>非自閉合標籤</strong>，必須有開始標籤和結束標籤。  </li>
<li>display: inline (雖然在 <a href="https://htmlreference.io/">htmlreference.io</a> 說預設是 block ，但我實際測試是跟換行有關，如下所示)  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這是換行效果--block</span></span><br><span class="line">&lt;span&gt;前面&lt;/span&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">src</span>=<span class="string">&quot;/example/music.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>後面<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<span>前面</span><br><audio controls src="/example/music.mp3"></audio><br><span>後面</span><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這是沒換行效果(或是換行但用&lt;div&gt;包住)--inline</span></span><br><span class="line">&lt;span&gt;前面&lt;<span class="regexp">/span&gt;&lt;audio controls src=&quot;/</span>example/music.<span class="property">mp3</span><span class="string">&quot;&gt;&lt;/audio&gt;&lt;span&gt;後面&lt;/span&gt;</span></span><br></pre></td></tr></table></figure>
<div>
<span>前面</span><audio controls src="/example/music.mp3"></audio><span>後面</span>
</div></li>
</ul>
<br>

<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>用來幫網頁加入音訊。可使用 <code>src</code> 屬性或在 &lt;audio&gt; 中加入 &lt;source&gt; 標籤來設定音訊來源。</li>
<li>&lt;audio&gt;&lt;&#x2F;audio&gt; 中除了 &lt;source&gt; 以外的內容在資源載入失敗或不支援時顯示。</li>
</ul>
<h2 id="屬性"><a href="#屬性" class="headerlink" title="屬性"></a>屬性</h2><ul>
<li>直接在 &lt;audio&gt; 中加入屬性。</li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>src</td>
<td>URL</td>
<td>音訊的來源位址</td>
</tr>
<tr>
<td>autoplay</td>
<td>(No value required)</td>
<td>是否自動撥放，若不使用預設是 false</td>
</tr>
<tr>
<td>loop</td>
<td>(No value required)</td>
<td>是否循環撥放，若不使用預設是 false</td>
</tr>
<tr>
<td>controls</td>
<td>(No value required)</td>
<td>是否顯示由瀏覽器提供的音訊控制面板，包含撥放進度、暫停、撥放紐等，若不使用預設是 false</td>
</tr>
<tr>
<td>currentTime</td>
<td>數值(number)</td>
<td>以秒為單位的當前撥放位置</td>
</tr>
<tr>
<td>muted</td>
<td>(No value required)</td>
<td>預設靜音，若不使用預設是 false</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例:</span></span><br><span class="line"><span class="comment">// 使用 controls 會自動產生控制面板(如下所示)</span></span><br><span class="line">&lt;audio controls muted src=<span class="string">&quot;/example/music.mp3&quot;</span>&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure>
<p><audio controls muted src="/example/music.mp3"></audio></p>
<br>

<ul>
<li>使用 &lt;source&gt; 標籤</li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>src</td>
<td>URL</td>
<td>音訊的來源位址</td>
</tr>
<tr>
<td>type</td>
<td></td>
<td>音訊的 MIME type</td>
</tr>
</tbody></table>
<p>&lt;source&gt; 是自閉合標籤，不須使用 <code>&lt;/source&gt;</code> 。<br>可利用 &lt;source&gt; 標籤加入多個音訊來源，瀏覽器會使用第一個有支援的格式來載入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;audio controls&gt;</span><br><span class="line">  這段文字在資源載入失敗或不支援時顯示。</span><br><span class="line">  &lt;source src=<span class="string">&quot;example.ogg&quot;</span> type=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;example.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTML 筆記</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30 挑戰】 Day1 - JavaScript Drum Kit</title>
    <url>/posts/470f6710/</url>
    <content><![CDATA[<p>這個專案對 JavaScript 只要有 function 跟 DOM 基礎就沒問題。另外需要有一點 HTML&#x2F;CSS 的概念才有辦法順利使用 <code>querySelector</code> 。</p>
<span id="more"></span>
<blockquote>
<p><a href="https://javascript30.com/">JavaScript30</a> 是一個由 <strong>Wes Bos</strong> 提出的免費教學計畫。藉由每天完成一個小專案，練習基礎 JavaScript 。整個計畫為期30天。除了會提供教學影片外，也會先做好前期準備(例如: HTML&#x2F;CSS 等相關建置)，練習時只需專注於撰寫 JavaScript 部分的程式碼即可。</p>
</blockquote>
<h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><ol>
<li>當按下鍵盤按鍵時，撥放特定音效。  </li>
<li>當按下鍵盤按鍵時，讓畫面上的按鍵圖示呈現變化，並在變化結束後恢復原狀。</li>
</ol>
<h2 id="練習內容"><a href="#練習內容" class="headerlink" title="練習內容"></a>練習內容</h2><ul>
<li>DOM querySelector  </li>
<li>.addEventLinstener()  </li>
<li>function  </li>
<li>.forEach()</li>
</ul>
<h2 id="開始前的準備"><a href="#開始前的準備" class="headerlink" title="開始前的準備"></a>開始前的準備</h2><blockquote>
<p>雖然這部分已由教學計畫提供，但有些東西對我來說還是新知識，所以還是做個筆記，萬一以後自己想做類似功能也不用再另外找資料。</p>
</blockquote>
<p><strong>1. 幫網頁加上音效:</strong><br>僅需要在 HTML 檔案中加入 <strong>&lt;audio&gt;標籤</strong>，並做好相關屬性設定。  </p>
<p><strong>2. 設定好鍵盤按鍵:</strong><br>因為我們要在按下鍵盤按鍵時，讓網頁做出指定回應，所以要先建立相關標籤屬性，讓電腦辨識不同的按鍵，以便為按鍵設定不同回應。可以看到教學計畫提供的 HTML 檔案已經為聲音跟按鍵都設好 <code>data-key</code> 這個屬性(attribute)並給予一個數值。鍵盤上的每個按鍵在按下時會有一個對應的 <code>keycode</code> ，只要知道 <code>keycode</code> 就可以對指定按鍵進行動作設定。  </p>
<p>如果不知道 <code>keycode</code> 可以到 <a href="keycode.info">keycode.info</a> 查詢。或是隨便開啟一個網頁，打開開發人員工具，在 console 區寫下下列程式碼後，回到網頁內容範圍(滑鼠點一下)在按下鍵盤按鍵，console 就會印出 <code>keycode</code> 了。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">keyCode</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>3. 做好 CSS 設定:</strong><br>專案目標是讓螢幕上的按鍵圖示在按下時產生變化，並在變化結束後恢復原狀。所以要設定好兩種 CSS 樣式:  </p>
<ul>
<li>原本的按鍵樣式: 在 <code>&#123;&#125;</code> 裡加上 <code>transition: all .07s;</code> ，決定 <code>要改變的屬性(property)</code> 、 <code>變化要花費的時間</code> 。  </li>
<li>變化後的按鍵樣式: 在 <code>&#123;&#125;</code> 裡加上 <code>transform: scale(縮放倍數);</code></li>
</ul>
<h2 id="練習開始"><a href="#練習開始" class="headerlink" title="練習開始"></a>練習開始</h2><p><strong>1. 定好 Event Linstener 的範圍和要執行的動作。</strong>  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, playAudio)</span><br><span class="line"><span class="comment">// window 為 document 再往上一層的物件，指監聽整個瀏覽器分頁。</span></span><br><span class="line"><span class="comment">// &#x27;keydown&#x27; 指鍵盤按鍵被按下時。</span></span><br><span class="line"><span class="comment">// playAudio 指執行名稱叫 playAudio 的fuction。</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 設定 playAudio() 要做的事。(撥放音效及畫面改變)</strong>  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">playAudio</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="comment">// e 指 .addEventListener() 在 &#x27;keydown&#x27; 發生時自動產生的 event 物件。</span></span><br><span class="line">  <span class="keyword">const</span> audio = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`audio[data-key=&quot;<span class="subst">$&#123;e.keyCode&#125;</span>&quot;]`</span>)</span><br><span class="line">  <span class="comment">// 把 audio 變數指向 keyCode 相符的 &lt;audio&gt; 標籤。</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.key[data-key=&quot;<span class="subst">$&#123;e.keyCode&#125;</span>&quot;]`</span>)</span><br><span class="line">  <span class="comment">// 把 key 變數指向 keyCode 相符的 &lt;div&gt; 標籤。</span></span><br><span class="line">  <span class="keyword">if</span> (!audio) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 如果找不到相符標籤，則中斷 function。</span></span><br><span class="line">  audio.<span class="property">currentTime</span> = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 如果找到相符標籤，按下按鍵時，音樂撥放進度回到第 0 秒。如果沒設定，在音訊完整前，按鍵不會重新撥放。</span></span><br><span class="line">  <span class="comment">// 因為 function 要求按鍵時撥放音訊，還沒放完 = 已經/正在放</span></span><br><span class="line">  audio.<span class="title function_">play</span>()</span><br><span class="line">  <span class="comment">// 撥放 keyCode 指向的 &lt;audio&gt; 標籤。</span></span><br><span class="line">  key.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;playing&#x27;</span>)</span><br><span class="line">  <span class="comment">// 指定的 &lt;div&gt; 標籤 class 屬性加上 &#x27;playing&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3. 先來看看目前為止發生了什麼事?</strong><br>指定的 &lt;div&gt; 標籤 class 屬性加上 ‘playing’ 後，當 CSS ‘.key’ 中的 <code>transition</code> 完成。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.key&quot;</span>)</span><br><span class="line"><span class="comment">// 找出所有 class 含 &quot;.key&quot; 的 &lt;div&gt; 標籤，總共9個。</span></span><br><span class="line">keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> key.<span class="title function_">addEventListener</span>(<span class="string">&#x27;transitionend&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// 檢查找出的所有 &lt;div&gt; 標籤，在 &#x27;transitionend&#x27; 時，輸出 Event 內容。</span></span><br></pre></td></tr></table></figure>
<p><img src="/../../Blog-image/posts/2022-01-29_TransitionEvent.webp" alt="TransitionEvent-image"><br>可以看到，在我們按了一下按鍵”A”後，總共出現了6個 <code>transitionend</code> ，只有 <code>propertyName</code> 不同。那是因為我們的 CSS 設定。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.key</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">07s</span> ease;</span><br><span class="line">  <span class="comment">/* 所有 property 都要執行 transition */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.playing</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  <span class="comment">/* propertyName: &#x27;transform&#x27; */</span></span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ffc600</span>;</span><br><span class="line">  <span class="comment">/* border 分上下左右，所以有4個 &#x27;transitionend&#x27; */</span></span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1rem</span> <span class="number">#ffc600</span>;</span><br><span class="line">  <span class="comment">/* propertyName: &#x27;box-shadow&#x27; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. 畫面在變化結束後恢復原狀。</strong>  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.key&quot;</span>)</span><br><span class="line"><span class="comment">// 共找出9個 class 含 &quot;.key&quot; 的 &lt;div&gt; 標籤。</span></span><br><span class="line">keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> key.<span class="title function_">addEventListener</span>(<span class="string">&#x27;transitionend&#x27;</span>, removeTransition))</span><br><span class="line"><span class="comment">// &#x27;transitionend&#x27; 時，執行名為 removeTransition 的function。</span></span><br></pre></td></tr></table></figure>
<p>這時，我總共找出9個 class 含 “.key” 的 &lt;div&gt; 標籤，但是想要刪除 class ‘.playing’ 的只有我們按的那一個。所以我們找出 這個 &lt;div&gt; 標籤所有 CSS 樣式裡最具代表性的 <code>transform</code> (不用寫一長串 property ，最具代表性的就好)，來繼續執行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeTransition</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="comment">// 查找 TransitionEvent 裡動作(type)為 &#x27;transitionend&#x27; 的項目。</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">propertyName</span> !== <span class="string">&#x27;transform&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 如果 TransitionEvent 的 propertyName 不等於 &#x27;transform&#x27; ，則停止 function。</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;playing&#x27;</span>)</span><br><span class="line">  <span class="comment">// 如果符合，則將 class 裡的 &#x27;.playing&#x27; 刪除。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
<br>
到這裡就全部完成了! 
]]></content>
      <categories>
        <category>JavaScript30 挑戰</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30 挑戰】 Day2 - JS and CSS Clock</title>
    <url>/posts/74544bca/</url>
    <content><![CDATA[<p>這個專案練習了 CSS 轉場效果( <code>transition</code> &amp; <code>transform</code> )，並利用 JavaScript function 來帶動 <code>transform</code> 的變化。</p>
<span id="more"></span>
<blockquote>
<p><a href="https://javascript30.com/">JavaScript30</a> 是一個由 <strong>Wes Bos</strong> 提出的免費教學計畫。藉由每天完成一個小專案，練習基礎 JavaScript 。整個計畫為期30天。除了會提供教學影片外，也會先做好前期準備(例如: HTML&#x2F;CSS 等相關建置)，練習時只需專注於撰寫 JavaScript 部分的程式碼即可。</p>
</blockquote>
<h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><ol>
<li>取得當地時間當下的時&#x2F;分&#x2F;秒資訊。  </li>
<li>利用取得的時間資訊，套入 CSS 設定來讓時鐘的指針移動。</li>
</ol>
<h2 id="練習內容"><a href="#練習內容" class="headerlink" title="練習內容"></a>練習內容</h2><ul>
<li><strong>JavaScript</strong><br>DOM querySelector 、 function 、Date() 、setInterval()</li>
<li><strong>CSS</strong><br>transform 、 transform-origin 、transition</li>
</ul>
<h2 id="開始前的準備"><a href="#開始前的準備" class="headerlink" title="開始前的準備"></a>開始前的準備</h2><blockquote>
<p>這部分已由教學計畫提供。</p>
</blockquote>
<p><strong>做好 HTML&#x2F;CSS 設定:</strong><br>做出時鐘長相並為指針做好相關設置。<br>為了練習 <code>transform-origin</code> ，指針預設往9點鐘方向。但我為了方便，已自行調整成12點鐘方向。</p>
<h2 id="練習開始"><a href="#練習開始" class="headerlink" title="練習開始"></a>練習開始</h2><p><strong>1. 調整指針起點至12點鐘方向</strong>  </p>
<ul>
<li>原本教學是用 <code>transform: rotate(90deg)</code> 處理，但為了方便，我直接調整 CSS。  </li>
<li><code>transform-origin</code> 跟著調整成 bottom。  </li>
<li><code>transition</code> 讓所有對象都執行變化，每次用0.05秒完成變化。</li>
<li>各別設定指針外觀，以便觀察後續變化。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hand</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: bottom;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.05s</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hour-hand</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">15%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35%</span>;</span><br><span class="line">  <span class="attribute">background</span>: tomato;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.min-hand</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.second-hand</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<br>

<p><strong>2. 用 setInterval() 設定 function 執行週期。</strong>  </p>
<ul>
<li>以每1000毫秒執行一次 setTime() function(秒針跳動頻率)。<br>註: 1秒 &#x3D; 1000毫秒<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(setTime, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<br></li>
</ul>
<p><strong>3. 取得時間資訊</strong></p>
<ul>
<li>分別找出 3 支指針。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hourHand = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hour-hand&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> minuteHand = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.min-hand&#x27;</span>)  </span><br><span class="line"><span class="keyword">const</span> secondHand = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.second-hand&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>建立一個 setTime() function ，並把要執行的動作放入函式。  </li>
<li>取得當下時間，並分別取出時&#x2F;分&#x2F;秒。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> hours = now.<span class="title function_">getHours</span>()</span><br><span class="line">  <span class="keyword">const</span> mins = now.<span class="title function_">getMinutes</span>()</span><br><span class="line">  <span class="keyword">const</span> seconds = now.<span class="title function_">getSeconds</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>依照時間比例算出旋轉角度，並帶入 CSS 的 <code>rotate()</code> 設置。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 取得時間</span></span><br><span class="line">  <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  <span class="keyword">const</span> seconds = now.<span class="title function_">getSeconds</span>();</span><br><span class="line">  <span class="keyword">const</span> mins = now.<span class="title function_">getMinutes</span>();</span><br><span class="line">  <span class="keyword">const</span> hour = now.<span class="title function_">getHours</span>();</span><br><span class="line">  <span class="comment">// 計算角度</span></span><br><span class="line">  <span class="keyword">const</span> secondsDegree = (seconds / <span class="number">60</span>) * <span class="number">360</span>;</span><br><span class="line">  <span class="keyword">const</span> minsDegree = ((mins / <span class="number">60</span>) * <span class="number">360</span>) + ((seconds / <span class="number">60</span> / <span class="number">60</span>) * <span class="number">360</span>);</span><br><span class="line">  <span class="keyword">const</span> hourDegree = ((hour / <span class="number">12</span>) * <span class="number">360</span>) + ((mins / <span class="number">12</span> / <span class="number">60</span>) * <span class="number">360</span>);</span><br><span class="line">  <span class="comment">// 角度代入 CSS</span></span><br><span class="line">  secondHand.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`rotate(<span class="subst">$&#123;secondsDegree&#125;</span>deg)`</span>;</span><br><span class="line">  minuteHand.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`rotate(<span class="subst">$&#123;minsDegree&#125;</span>deg)`</span>;</span><br><span class="line">  hourHand.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`rotate(<span class="subst">$&#123;hourDegree&#125;</span>deg)`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
到這裡就是一個會動的正確時鐘了。  <br></li>
</ul>
<p><strong>4. 旋轉優化</strong></p>
<ul>
<li>觀察秒針活動軌跡發現，當它要從 59 秒跳回 0 秒時會逆時針旋轉。因為對電腦來說 59 –&gt; 0 是”後退”不是”前進”。最簡單的方法就是，當指針要回到 0 秒時，花費 0 秒直接變化，肉眼就看不出回退過程了。  </li>
<li>設置一個檢查：如果任一指針角度為0，<code>transition</code> 改為 ‘all 0s’。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設置一個分辨角度的 function</span></span><br><span class="line"><span class="keyword">if</span> (secondsDegree === <span class="number">0</span></span><br><span class="line">  || minsDegree === <span class="number">0</span></span><br><span class="line">  || hourDegree === <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hand&#x27;</span>).<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;all 0s&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hand&#x27;</span>).<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;all 5ms&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>因為 JavaScript 有<strong>由上而下</strong>的執行順序，所以要把這段插到 “角度代入 CSS” 之前。</li>
</ul>
<br>
<br>

<p>到這裡就全部完成了!<br>學習到方便的時間取得辦法後，我就要把部落格 footer 從網路上照抄的程式碼改掉了。學到的東西能確實應用真的會很有動力!</p>
]]></content>
      <categories>
        <category>JavaScript30 挑戰</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>data-* HTML 自定義屬性及 dataset</title>
    <url>/posts/b8b00b13/</url>
    <content><![CDATA[<p>在 <a href="/posts/470f6710/">JS30 Day1</a> 第一次看到 data-* 屬性，學習 DOM 之後發現真是太好用了阿!</p>
<span id="more"></span>
<blockquote>
<p>筆記內容為學習過程中的紀錄，內容可能未臻完善，如有錯漏，歡迎留言，謝謝!</p>
</blockquote>
<h2 id="data-基本介紹"><a href="#data-基本介紹" class="headerlink" title="data-* 基本介紹"></a>data-* 基本介紹</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML/Global_attributes/data-*">[MDN 說明]</a>  </p>
<p>HTML 標籤除了預設的屬性之外，其實還有個很好用的自定義屬性 <code>data-*</code> ，這個東西在開始進行 DOM 操作後，更可以明顯感受到它的方便性。通常我們在眾多 HTML 標籤中要針對特定幾個元素做操作時，會使用 id 或 class 來指定，但實際使用下來不夠彈性。例如:  </p>
<p>現在有 52 張撲克牌，我和朋友玩了撿紅點。計分時黑牌不計分、紅牌數值相加。我可以直接用 class name “card” 來套用同樣的卡背樣式。但如果我想把所有吃到”紅色牌分數”相加時，現有的屬性沒辦法滿足我的需求。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用 &lt;div&gt; 做出 52 張牌 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...(略)</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span>J<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span>Q<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span>K<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>於是，我就可以用 <code>data-*</code> 來加上我需要的屬性內容。 用 <code>data-suit</code> 來表示花色、 <code>data-value</code> 來表示數字。這樣，我就可以一眼看出這張牌的顏色和數字了!  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加上花色及數值屬性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">data-suit</span>=<span class="string">&quot;club&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">data-suit</span>=<span class="string">&quot;diamond&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">data-suit</span>=<span class="string">&quot;heart&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...(略)</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">data-suit</span>=<span class="string">&quot;heart&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;11&quot;</span>&gt;</span>J<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">data-suit</span>=<span class="string">&quot;spade&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;12&quot;</span>&gt;</span>Q<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">data-suit</span>=<span class="string">&quot;spade&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;13&quot;</span>&gt;</span>K<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>data-*</code> 可以新增一個”自定義屬性”，並給這個屬性一個”值”，有了這個設定之後，就可以更有針對性及彈性的對特定元素進行操作。  </p>
<h3 id="命名規則"><a href="#命名規則" class="headerlink" title="命名規則"></a>命名規則</h3><p><strong>(很重要! 和後面提到的 dataset 應用有關!)</strong>  </p>
<ul>
<li>同 class 命名慣例，用 <code>-</code> 串接字詞。  </li>
<li>名字絕對不能以 <code>xml</code> 起頭。  </li>
<li>名字只能包含小寫字母、數字、dash（-）、點（.）、冒號（:）和下底線（_）。</li>
</ul>
<h3 id="補充說明"><a href="#補充說明" class="headerlink" title="補充說明"></a>補充說明</h3><p> <code>data-*</code> 所儲存的屬性值型別都是<strong>字串</strong>，如果要進行四則運算要記得先轉換型別!</p>
<h2 id="CSS-應用"><a href="#CSS-應用" class="headerlink" title="CSS 應用"></a>CSS 應用</h2><h3 id="CSS-選擇器"><a href="#CSS-選擇器" class="headerlink" title="CSS 選擇器"></a>CSS 選擇器</h3><p>我們常以 class 及 id 來定義 CSS 樣式。其實 CSS 選擇器中有一個<strong>屬性選擇器</strong>，可以依屬性值來選擇特定元素。接續上面的撲克牌為例，把花色為愛心&#x2F;方塊的牌顯示為紅色:  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 選擇屬性為特定值的元素 */</span></span><br><span class="line"><span class="selector-attr">[data-suit=<span class="string">&quot;heart&quot;</span>]</span>,</span><br><span class="line"><span class="selector-attr">[data-suit=<span class="string">&quot;diamond&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CSS-content-及-attr"><a href="#CSS-content-及-attr" class="headerlink" title="CSS content 及 attr()"></a>CSS content 及 attr()</h3><p><code>content</code> 可以用 CSS 直接生成靜態文字； <code>attr()</code> 則是可以讀取”屬性值”。<br>如果有3個設好 <code>data-value</code> 的撲克牌，我要讓它在 <code>&lt;div&gt;&lt;/div&gt;</code> 中間加入屬性的值:  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 原本未加 CSS 狀態 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>設置 CSS content:  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CSS 渲染過後的 HTML 會呈現:  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;A&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="DOM-與-JavaScript-應用"><a href="#DOM-與-JavaScript-應用" class="headerlink" title="DOM 與 JavaScript 應用"></a>DOM 與 JavaScript 應用</h2><h3 id="DOM-querySelector"><a href="#DOM-querySelector" class="headerlink" title="DOM querySelector"></a>DOM querySelector</h3><ul>
<li><p>在使用 querySelector 時，可以直接指定<strong>屬性值</strong>。以”選擇所有梅花牌”為例:  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 選取所有含 data-suit=&quot;club&quot; 的節點</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectors</span>(<span class="string">&#x27;[data-suit=&quot;club&quot;]&#x27;</span>)</span><br><span class="line"><span class="comment">// 選取所有含 data-suit=&quot;club&quot; 的 &lt;div&gt; 節點</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectors</span>(<span class="string">&#x27;div[data-suit=&quot;club&quot;]&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以更彈性的運用，使用 template 代入屬性值。以 <a href="https://github.com/ritachien/JavaScript30/blob/master/01%20-%20JavaScript%20Drum%20Kit/index.html">[JS30 Day1 JavaScript Drum Kit]</a> 為例:<br>在 HTML 部分設置了4個按鍵元素(A、S、D、F)，並為每個按鍵標上編號。  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;65&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;83&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span>S<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;68&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">&quot;70&quot;</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span>F<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>設置監聽事件，自動讀取事件紀錄的 <code>keyCode</code> 並將數值代入 template 中。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, playAudio)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">playAudio</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.key[data-key=&quot;<span class="subst">$&#123;event.keyCode&#125;</span>&quot;]`</span>)</span><br><span class="line">  <span class="comment">// 其他程式碼(略)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如: 按下&quot;A&quot;鍵，事件紀錄的 keyCode:65 ，這裡就會直接把65代入。上面的程式碼會變成:</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.key[data-key=&quot;65&quot;]&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="HTMLElement-dataset"><a href="#HTMLElement-dataset" class="headerlink" title="HTMLElement.dataset"></a>HTMLElement.dataset</h3><p><a href="https://developer.mozilla.org/zh-TW/docs/orphaned/Web/API/HTMLOrForeignElement/dataset">[MDN 說明]</a>  </p>
<h4 id="命名轉換"><a href="#命名轉換" class="headerlink" title="命名轉換"></a>命名轉換</h4><p><strong>dash-style to camelCase</strong>  </p>
<ol>
<li>刪去前綴字 <code>data-</code> 。  </li>
<li>每個 <code>-</code> 後的第一個字母轉為大寫，刪去中間 <code>-</code> 後連接字串。<br>例如: <code>data-abc-def-ghi</code> 會被轉換為 <code>abcDefGhi</code>。</li>
</ol>
<h4 id="實際運用"><a href="#實際運用" class="headerlink" title="實際運用"></a>實際運用</h4><blockquote>
<p>範例取自 MDN 文件<br>有個 HTML 元素如下:</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;1234567890&quot;</span> <span class="attr">data-user</span>=<span class="string">&quot;johndoe&quot;</span>&gt;</span></span><br><span class="line">  John Doe</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果我要取它的 <code>data-*</code> 屬性值，取值方式如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 選取要取值的對象</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#user&#x27;</span>)</span><br><span class="line"><span class="comment">// 開始取值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">dataset</span>.<span class="property">id</span>)  <span class="comment">// 回傳 &#x27;1234567890&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">dataset</span>.<span class="property">user</span>)  <span class="comment">// 回傳 &#x27;johndoe&#x27;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JavaScript 筆記</category>
        <category>HTML 筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Alpha Camp 學期 2-2 結業心得</title>
    <url>/posts/f46b1c2/</url>
    <content><![CDATA[<blockquote>
<p>在寫 code 之前先分拆邏輯與流程、用函式封裝程式碼、用心命名變數，這些基本動作原來是這麼地重要。  </p>
</blockquote>
<span id="more"></span>
<h3 id="OBJECTIVE"><a href="#OBJECTIVE" class="headerlink" title="OBJECTIVE"></a>OBJECTIVE</h3><p>經過學期2–2的學習，除了一邊複習之前學過的東西外，也對於程式流程的優化有更進一步的了解。尤其是使用 MVC 架構，讓整個程式不管是邏輯、流程或者是管理維護上都有了很大的提升。因為越學越有興趣的關係，和之前的幾個學期相比，現在的我對於主動優化作業有了很大的熱情。另外就是對於學期開頭的介紹有了更深刻的體會與認同!在寫 code 之前先分拆邏輯與流程、用函式封裝程式碼、用心命名變數，這些基本動作原來是這麼地重要。  </p>
<h3 id="REFLECTIVE"><a href="#REFLECTIVE" class="headerlink" title="REFLECTIVE"></a>REFLECTIVE</h3><p>大量的實作學習讓我從「跟著助教做」轉為「思考另一種做法的利弊是什麼」。因為多了各種思考過程，我開始了大量的資料閱讀和撰寫嘗試。在嘗試的過程中發現不同的寫法各有利弊，結果的選擇很大程度上取決於使用者體驗(目前就是我自己啦😆)  </p>
<p>就是因為想加的功能越變越多，導致我需要不斷往前修改之前考慮的不夠完善的地方，這個時候就想到:如果在最一開始，我對於那些撰寫基礎能更重視和用心，後面這些時間也許都可以節省下來。  </p>
<h3 id="INTERPRETIVE"><a href="#INTERPRETIVE" class="headerlink" title="INTERPRETIVE"></a>INTERPRETIVE</h3><p>這個學期下來也讓我對於「複習」這件事有了態度上的轉變。從原本的「之前不夠熟悉、必須找時間再多多複習」變成「主動在作業中融入以前學過的東西」。每個學期、甚至每個教案的著重點本來就不一樣，「複習」這件事就要找到適合自己的方法，不能依賴虛無飄渺的「找個時間來複習」。  </p>
<p>觀摩同學作業時，發現在一個作業中同時融入了很多以前學過的東西( media queries 、 flex、position…等)，可以看出他在開始編寫程式碼前，已經對設計成品有具體的想法，可能也針對不同螢幕大小畫出了多張 wireframe ，考慮了很多面向的東西。 他的練習實踐方式讓我發現我可以在完成當下目標同時複習以前學過的東西，學習的輸入可以從各自為政變成融會貫通 。  </p>
<h3 id="DECISIONAL"><a href="#DECISIONAL" class="headerlink" title="DECISIONAL"></a>DECISIONAL</h3><p>接下來進行課程時，希望自己能保持主動優化的動力。也許不是每一次嘗試都能得到好的結果，但在嘗試的過程中需要查資料、方法的選擇、功能的取捨，利用這個過程慢慢積累自己的知識庫，期望未來能不愧對付出的時間和努力!  </p>
]]></content>
      <categories>
        <category>學習紀錄 - AlphaCamp</category>
      </categories>
      <tags>
        <tag>AlphaCamp</tag>
      </tags>
  </entry>
  <entry>
    <title>Alpha Camp 學期 2-3 結業心得</title>
    <url>/posts/924950b4/</url>
    <content><![CDATA[<p>隨著時間的推移，在學習上總是會碰到各種不同的狀況，而這些狀況也提供我不同的學習感受。這篇著重於紀錄自己遇到、找出並排除問題的過程。  </p>
<blockquote>
<p>要解決問題，必須先正確的找出問題發生原因。  </p>
</blockquote>
<span id="more"></span>

<h2 id="緣起：為短網址產生器加上重複檢查機制"><a href="#緣起：為短網址產生器加上重複檢查機制" class="headerlink" title="緣起：為短網址產生器加上重複檢查機制"></a>緣起：為短網址產生器加上重複檢查機制</h2><p>一如上學期結束時對自己許的願，這學期在寫作業的同時會盡可能地做些優化挑戰，然後不可避免的進入無窮卡關迴圈……  </p>
<p>近期卡了最久的就是短網址產生器了!! 作業的要求其實很簡單，只要可以產生英文字母或數字的隨機亂碼來當短網址即可。但是! 我突然想到:「萬一真的產生了相同的亂碼怎麼辦?」。依照我當下的執行邏輯，產生亂碼之後就馬上把它和原始網址加入互相對照的 index ，在沒有檢查的情況下，兩組原始網址導向同一個短網址也不是不可能發生。  </p>
<p>於是，我決定了優化方向：「在亂數產生器 return 結果之前加上檢查機制」，只要發現相同亂碼就重新執行一次亂碼產生流程。然後……在這個優化過程被卡了整整 2 天 🤣  </p>
<h2 id="嘗試失敗1：同步與非同步"><a href="#嘗試失敗1：同步與非同步" class="headerlink" title="嘗試失敗1：同步與非同步"></a>嘗試失敗1：同步與非同步</h2><blockquote>
<p>先來備註一下：這次用來存放 UrlIndex 資料的是 MongoDB。  </p>
</blockquote>
<p>原本的寫法如下(只放有問題部分):  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 產生亂碼短網址 &lt;file:root/utils/shortGenerator.js&gt;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generator</span> (length) &#123;</span><br><span class="line">  <span class="comment">// 1. generate random code</span></span><br><span class="line">  <span class="comment">// 2. Check if random url already exist</span></span><br><span class="line">  <span class="comment">// =&gt; if exist, run &quot;generator (length)&quot;</span></span><br><span class="line">  <span class="comment">// =&gt; if not yet exist, return result</span></span><br><span class="line">  <span class="title class_">UrlIndex</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">shortenUrl</span>: result &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> data ? <span class="title function_">generator</span>(length) : result</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把短網址存入對照 index &lt;file:root/app.js&gt;</span></span><br><span class="line"><span class="title class_">UrlIndex</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">shortenUrl</span>: <span class="title function_">generator</span>(<span class="number">5</span>),</span><br><span class="line">  <span class="attr">originalUrl</span>: req.<span class="property">body</span>.<span class="property">url</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在我的預想中， <code>generator()</code> 負責產生獨一無二的短網址，而 <code>UrlIndex.create()</code> 把取得的短網址拿去建立 index 。但是，看似沒問題的邏輯跳錯誤了! 好在目前遇到的大部分錯誤訊息都能正確敘述出問題的原因，它告訴我 shortenUrl 的值 <code>undefined</code> 。於是我去查查賦值 <code>undefined</code> 的原因，發現在我寫的流程裡最有可能的原因是：「若變數沒有提供初始值，則預設為 <code>undefined</code> 」。但不對啊~我不是有告訴 <code>UrlIndex.create()</code> shortenUrl 的值從 <code>generator()</code> 取得嗎? 為什麼會 <code>undefined</code> 呢?  </p>
<p>前幾天因緣際會接觸到「非同步」相關知識的我想起了前輩對非同步的評語：  </p>
<blockquote>
<p>實戰常常遇到問題，一研究發現，怎麼又是你！  </p>
</blockquote>
<p>檢查了一下目前進度，確實啊~ <code>UrlIndex.create()</code> 和 <code>UrlIndex.findOne()</code> 都是非同步語法，如果沒有處理好，根本無法控制完成的先後順序。於是，再度開始了 google 旅程，發現目前對於非同步執行順序最常使用兩種方式:  </p>
<ul>
<li>async&#x2F;await  </li>
<li>Promise.then()</li>
</ul>
<p>因為對 <code>async/await</code> 值的傳遞方式還不太熟悉，因此決定先用 <code>Promise.then()</code> 的方式。 <code>.then</code> 的前面必須是個 Promise 物件，但我目前 return 的是亂碼「值」。幸好查到的資料告訴我， mongoose 5.0 開始就內建 Promise 語法，所以我可以把整個 <code>UrlIndex.findOne()</code> 包成 Promise 物件。最後，我把整個檢驗是否重複的過程直接 return ，順利解決了執行順序問題。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 產生亂碼短網址</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generator</span> (length) &#123;</span><br><span class="line">  <span class="comment">// (前略)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">UrlIndex</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">shortenUrl</span>: result &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> data ? <span class="title function_">generator</span>(length) : result</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ShortGenerator</span>(randomLength)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> urlData ? urlData : <span class="title class_">UrlIndex</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">      <span class="attr">shortenUrl</span>: url,</span><br><span class="line">      <span class="attr">originalUrl</span>: req.<span class="property">body</span>.<span class="property">url</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="嘗試失敗2：mongoose-語法-return-值"><a href="#嘗試失敗2：mongoose-語法-return-值" class="headerlink" title="嘗試失敗2：mongoose 語法 return 值"></a>嘗試失敗2：mongoose 語法 return 值</h2><p>接著，我想把產生的短網址結果呈現給使用者:  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">UrlIndex</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">originalUrl</span>: req.<span class="property">body</span>.<span class="property">url</span> &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">urlData</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">ShortGenerator</span>(randomLength)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> urlData ? urlData : <span class="title class_">UrlIndex</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">            <span class="attr">shortenUrl</span>: url,</span><br><span class="line">            <span class="attr">originalUrl</span>: req.<span class="property">body</span>.<span class="property">url</span></span><br><span class="line">          &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">urlData</span> =&gt;</span> res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123; urlBasic, urlData &#125;))  <span class="comment">// 執行到這行出問題!!</span></span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err))</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>這時候又跳錯誤了! 根據錯誤訊息查詢，發現是 handlebars 因為安全性問題，只接受乾淨的物件資料，通常可以用 <code>.lean()</code> 解決。把 <code>urlData</code> 印出來，看看到底取到什麼值? 嗯?? <code>_id</code> 裡面那個 new 是什麼? 看起來確定是回傳值的問題。<br><img src="/../Blog-image/posts/2022-04-24_returnValueOfMongoose.webp" alt="error_returnValueOfMongoose">  </p>
<p>於是我加上了 <code>.lean()</code> ，但它又報錯了!  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">urlData</span> =&gt;</span> &#123;</span><br><span class="line">  urlData = urlData.<span class="title function_">lean</span>()</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123; urlBasic, urlData &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="/../Blog-image/posts/2022-04-24_mongoose.lean.webp" alt="error_mongoose.lean">  </p>
<p>測試後發現：如果是已建立 index 的網址就沒問題；反之，如果是新建的就會報錯。那就表示兩者拿到的資料不一樣。仔細查閱了 mongoose 官方文件， <code>UrlIndex.findOne()</code> 回傳 Query、 <code>UrlIndex.create()</code> 回傳 Promise 物件……好吧! 接下來的問題就是如何取 <code>UrlIndex.create()</code> 的「值」?  </p>
<p>在各種變換關鍵字後，終於在  stack overflow 找到救世主，可以用 <code>toObject()</code> 進行資料轉換。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">urlData</span> =&gt;</span> &#123;</span><br><span class="line">  urlData = urlData.<span class="title function_">toObject</span>()</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123; urlBasic, urlData &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br>
大功告成! 一切終於都如我預期的運作了!!  

<p>成品程式碼: <a href="https://github.com/ritachien/URL_Shortener">在這裡</a>。  </p>
<h2 id="心得分享"><a href="#心得分享" class="headerlink" title="心得分享"></a>心得分享</h2><p>寫出來真的很有成就感啊!! 除了這個作業優化外，其實前面的作業也有經過類似的優化煎熬過程。總結起來解決問題的方法分幾個部分:  </p>
<ul>
<li>預防 – 仔細閱讀使用工具的官方文件、了解它的使用方法，正確的使用工具可以排除很多可能發生的問題。  </li>
<li>找出問題 – 知道問題發生原因才是解決的最快方法。就像前面分享的問題二，看起來是 handlebars 接受的資料類型問題，實際上是 mongoose 回傳值的原因。  </li>
<li>查找資料 – 在找出正確問題的前提下，盡可能下對關鍵字可以找到更接近需求的內容。</li>
</ul>
<p>不過沒有一次找到目標資料也沒關係，多多閱讀的過程中也能吸收各種知識，也許會在未來的某一天成為解決其他問題的關鍵!  </p>
]]></content>
      <categories>
        <category>學習紀錄 - AlphaCamp</category>
      </categories>
      <tags>
        <tag>AlphaCamp</tag>
      </tags>
  </entry>
  <entry>
    <title>【CS50x(2022)】 Week0 - Scratch</title>
    <url>/posts/b357a5fe/</url>
    <content><![CDATA[<p>開始挑戰 CS50x(Introduction to Computer Science)了! </p>
<blockquote>
<p>What ultimately matters in this course is not so much where you end up relative to your classmates but where you end up relative to yourself when you began.<br>—- CS50x</p>
</blockquote>
<span id="more"></span>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次接觸到 Harvard 有名的 CS50 課程是在 Youtube 上看到這部影片:  </p>
<div class="youtube-video">
  <div class="video-container"><iframe src="https://www.youtube.com/embed/XWe4iohhmIw" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
</div>

<p>台上四位同學拿到一模一樣的道具、聽到一模一樣的指令，但是卻做出不一樣的動作。講師利用這種情境來告訴聽眾：我們給予的指令要「精準」，不然容易出現意料之外的結果。這種情境式的教學方式讓我覺得很有趣，運用一些簡單的例子來協助理解 Computer Science。  </p>
<h2 id="課程內容"><a href="#課程內容" class="headerlink" title="課程內容"></a>課程內容</h2><ul>
<li>What is computer science?  </li>
<li>Representing numbers  </li>
<li>Text  </li>
<li>Images, video, sounds  </li>
<li>Algorithms  </li>
<li>Pseudocode  </li>
<li>Scratch basics  </li>
<li>Abstraction  </li>
<li>Conditionals and more</li>
</ul>
<h3 id="二進位-Binary"><a href="#二進位-Binary" class="headerlink" title="二進位(Binary)"></a>二進位(Binary)</h3><p><strong>電腦只看得懂 <code>0</code> 跟 <code>1</code></strong> ，而二進位制是一種用 0 和 1 代表不同數字的進位方式。二進位中每個 bit 可以表示 1 和 0，而當我們有更多的 bits 時我們可以代表更大的數字，例如二進位的 11 是十進位的 3，111 是十進位的 7。  </p>
<h3 id="ASCII-x2F-Unicode"><a href="#ASCII-x2F-Unicode" class="headerlink" title="ASCII&#x2F;Unicode"></a>ASCII&#x2F;Unicode</h3><p>既然二進位表達的是「數字」，那其他的文字、符號呢？<br>ASCII 和 Unicode 都是字符對照表，兩者的差別就不贅述了。都是用數字來表示字母，例如：大寫的 A 是用十進位的 65 表示，也是二進位的 01000001。  </p>
<h3 id="RBG、圖片、影片"><a href="#RBG、圖片、影片" class="headerlink" title="RBG、圖片、影片"></a>RBG、圖片、影片</h3><p>RGB 是把顏色用不同「值」的紅(Red)、綠(Green)、藍(Blue)組合而成。而很多不同的顏色可以組成圖片、很多圖片可以連成影片。  </p>
<h3 id="二分搜尋法及程式邏輯-電話簿情境題"><a href="#二分搜尋法及程式邏輯-電話簿情境題" class="headerlink" title="二分搜尋法及程式邏輯(電話簿情境題)"></a>二分搜尋法及程式邏輯(電話簿情境題)</h3><p><strong>問題：要怎麼從厚厚的電話簿中找到指定人物的電話呢？</strong>  </p>
<ol>
<li>一頁一頁翻 ➜ 可以正確找到，但是好沒效率…  </li>
<li>兩頁兩頁跳著翻 ➜ 查詢效率是兩倍，但是萬一在單數頁怎麼辦？  </li>
<li>二分搜尋法 ➜ 從中間翻閱，依照姓名排序捨棄一半資料(不斷重複)</li>
</ol>
<p>完善搜尋方式的過程，並把過程用虛擬碼(pseudocode)寫出來幫助思考整個流程運作，最後用虛擬碼解釋函式、條件判斷、變數、迴圈…等是什麼?  </p>
<p><img src="/../Blog-image/posts/2022-24-29_pseudocode.webp" alt="pseudocode"><br>(圖片來自 CS50 課程內容  )</p>
<h3 id="Scratch"><a href="#Scratch" class="headerlink" title="Scratch"></a>Scratch</h3><p>用拼圖方式一步步組裝，做出一個可以運行的程式。  </p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>寫程式其實就是一個解題的過程，首先要確保可以得出正確的答案，再來才是優化解題的過程。  </p>
<p>在電話簿情境題中，如果僅僅是為了提升效率而兩頁兩頁做排查，也許會因為搜尋對象在單數頁而錯過。那即使可以在較短時間排查更多的資料也沒用，因為這種排查邏輯並不完善。  </p>
<p>從開始學習程式到現在已經大約半年了，由於 CS50x 是全英文課程，如果沒有一點點的程式基礎，聽起來真的會比較辛苦。半年前第一次聽的我和現在的重新撿回課程的我比起來，終於能比較順暢的聽懂了!接下來就是好好地堅持下去，認真的走完這個課程。  </p>
<blockquote>
<p>相關文章: <a href="https://ritachien.github.io/tags/CS50x-2022/">CS50x(2022)</a>  </p>
</blockquote>
]]></content>
      <categories>
        <category>學習紀錄 - CS50</category>
      </categories>
      <tags>
        <tag>CS50x(2022)</tag>
      </tags>
  </entry>
  <entry>
    <title>【CS50W】Lecture0：HTML &amp; CSS</title>
    <url>/posts/be2c6d84/</url>
    <content><![CDATA[<p>課程名稱：CS50(Web Programming with Python and JavaScript)</p>
<span id="more"></span>

<h2 id="課程內容"><a href="#課程內容" class="headerlink" title="課程內容"></a>課程內容</h2><ul>
<li>HTML：HTML 結構、Common HTML Tags …簡介。  </li>
<li>CSS：Common CSS Properties、Specificity、CSS Selectors。  </li>
<li>Responsive Design：viewport、Media Queries、Flexbox、Grids。  </li>
<li>Bootstrap  </li>
<li>Sass：variables and nesting</li>
</ul>
<h2 id="問題討論：-style-method-的選擇"><a href="#問題討論：-style-method-的選擇" class="headerlink" title="問題討論： style method 的選擇"></a>問題討論： style method 的選擇</h2><p><strong>Method1 - Use inline style：</strong>  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: green&quot;</span>&gt;</span>CSS from inline style<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Method2 - Use style tag：</strong>  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS from style tag<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Method3 - Use link to CSS file：</strong>  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS from link to CSS file<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<p>上面三種方式的結果都一樣，各有優缺點。  </p>
<ul>
<li><strong>inline style</strong> 在順位上是三者中最高的，不會被其他的 CSS 設定覆蓋或影響。缺點是每個 HTML 元素要分別設置，在效率上或實用性上較不方便。  </li>
<li><strong>style tag</strong> 把 CSS 設定從各個 HTML 標籤中分離出來，在配合 CSS 選擇器的情況下，可以一次對多個 HTML 元素進行樣式設定，效率較高。畢竟學習寫程式的過程中，很常看到的一句話就是：「盡可能減少重複的程式碼」。另外一點就是，使用這種方式會把文件的「內容」和「樣式」區分開來管理，除了文件內容的結構會比較清晰易懂，也較容易達到「關注點分離」的效用。  </li>
<li>相對於 style tag 雖然把樣式跟內容分開，但兩者還是在同一個 HTML 文件裡； <strong>link to CSS file</strong> 的方式就直接將樣式設定放進單獨的 CSS 檔案做管理，「關注點分離」也更明確。另外就是，隨著我們做的 web app 規模變大，為了網頁畫面的一致性，我們可能會在多個網頁套用相同的 CSS 樣式。直接將樣式設定獨立成一個檔案並用 link 的方式引用，可以讓多個 HTML 文件引用同一個 CSS 樣式檔案。</li>
</ul>
<h2 id="小結：關注點分離"><a href="#小結：關注點分離" class="headerlink" title="小結：關注點分離"></a>小結：關注點分離</h2><p>關注點分離是在寫程式時要特別注意的地方，其目的就是讓程式碼的每個部分「分工明確」。這麼做的好處是，當程式碼執行結果發現任何不符合預期的地方，我們可以很容易地找出出問題的段落並進行修正，並且「只」需要修正該部分就好，程式碼的其他地方都不會受到影響。這在維護上會較方便、測試部分功能時也只需要針對特定一小段落即可，整體流程更有效率也不容易出錯。  </p>
]]></content>
      <categories>
        <category>學習紀錄 - CS50</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>CS50W</tag>
      </tags>
  </entry>
  <entry>
    <title>【CS50x(2022)】 Week1 - C</title>
    <url>/posts/100ec410/</url>
    <content><![CDATA[<p>第一次接觸 C，發現不同程式語言的寫作邏輯其實還是差不多的，差別在於較古老的語言在「便利性」上比較沒有那麼人性化。  </p>
<span id="more"></span>
<h2 id="課程內容"><a href="#課程內容" class="headerlink" title="課程內容"></a>課程內容</h2><ul>
<li>C  </li>
<li>IDEs, compilers, interfaces  </li>
<li>Functions, arguments, return values, variables  </li>
<li>main, header files, commands  </li>
<li>Types, format codes, operators  </li>
<li>Variables, syntactic sugar  </li>
<li>Calculations  </li>
<li>Conditionals, Boolean expressions  </li>
<li>Loops, functions  </li>
<li>Mario  </li>
<li>Imprecision, overflow</li>
</ul>
<h2 id="用-C-學習程式寫作基礎"><a href="#用-C-學習程式寫作基礎" class="headerlink" title="用 C 學習程式寫作基礎"></a>用 C 學習程式寫作基礎</h2><p>本週開始接觸到新的語言 C。<br>上週用圖像化的 Scratch 來講解程式運作原理，這週承襲上週範例使用同樣的運作流程，只是改用 C 把它寫出來。  </p>
<p>C 是一個相對古老的語言，所以他在寫作方式上並不像較新的語言那樣簡潔。比如:</p>
<ol>
<li>請使用者輸入名字</li>
<li>在螢幕上印出 <code>Hello, 名字</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  用 JavaScript 寫</span></span><br><span class="line">name = <span class="title function_">prompt</span>(<span class="string">&quot;Enter your name: &quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>
<p>JavaScript 只用一個變數儲存使用者的輸入值，然後輸出時套用即可。  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用 C 寫</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cs50.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> name = get_string(<span class="string">&quot;Enter your name: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, %s\n&quot;</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用 C 寫就比較辛苦了，因為 C 必須要把每件事都寫得很清楚:  </p>
<ul>
<li>因為需要在螢幕上輸出內容，所以需要 <code>#include &lt;stdio.h&gt;</code>。  </li>
<li>要用到向使用者拿輸入內容的函式 <code>get_string</code>，所以需要 <code>#include &lt;cs50.h&gt;</code>。(這還是 CS50 的員工寫出來的 library ，不然可能更麻煩 😅)  </li>
<li>主要的執行內容需用 <code>int main(void)&#123;&#125;</code> 包覆。  </li>
<li>每個變數要在最一開始就定義好它的 data type。  </li>
<li>用 <code>%</code> 引用變數值，並要清楚定義這個值的 data type。</li>
</ul>
<p>因為先學了 JavaScript 才接觸到 C，所以寫作的過程相當不習慣、覺得很麻煩。但是在練習中不斷的除錯、除錯、再除錯，漸漸地發現這樣嚴謹的寫法練習很重要！因為在寫作過程中，必須每時每刻都很清楚自己正在用什麼、需要用什麼，一旦漏掉某個部分，可能就會炸出一堆錯誤訊息。  </p>
<h2 id="作業練習-Problem-Set-1"><a href="#作業練習-Problem-Set-1" class="headerlink" title="作業練習 (Problem Set 1)"></a>作業練習 (Problem Set 1)</h2><p>CS50x 課程提供了一個完整的線上 codespace，依照教學做完初次設定，之後就可以打開即寫了，成果測試和作業提交也相當方便。  </p>
<p>第一次接觸 C 語言就一口氣來了5個作業練習(其實應該算3個，其中2題是難易二選一就好，但我龜毛，想達成100%成就！)  </p>
<ul>
<li><strong>Hello.c</strong><br>就是上面提到的範例。練習輸入、輸出、 header files、comments  </li>
<li><strong>Mario-less.c</strong><br>do while 迴圈、nesting for loop  </li>
<li><strong>Mario-more.c</strong><br>do while.c 迴圈、nesting for loop，比上一題再複雜一點。</li>
<li><strong>Cash.c</strong><br>do while 迴圈、function。C 的 function 很特別，要在最開頭決定 return type(或 void)，引入的參數 type 也要定好。</li>
<li><strong>Credit.c</strong><br>do while 迴圈、if&#x2F;else、while loop，是上一題的進階。</li>
</ul>
<p>寫了差不多整整一天，雖然不是用最有效率的做法答題，但主要就是想用這週課堂學到的方式解題。練習量大的成果就是能「體會」上課內容到底在說什麼東西，但寫完之後覺得還需要重新把課程補充資料看過一遍做個複習。</p>
<h2 id="提升-Coding-品質"><a href="#提升-Coding-品質" class="headerlink" title="提升 Coding 品質"></a>提升 Coding 品質</h2><p>除了 C 的教學外，講師也有一再探討怎麼樣才是好的 code design。Coding 分三個階段:  </p>
<ul>
<li><strong>correctness：</strong> 要能正確的解決問題。  </li>
<li><strong>design：</strong> 包含變數的設計、減少重複的程式碼、提高程式碼再使用率、維護便利性…等。  </li>
<li><strong>style：</strong> 整體規格要有一致性、並提高閱讀便利性，盡可能整齊、簡潔明瞭。</li>
</ul>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>上了兩週的進度了，覺得課程的講解方式還算容易吸收，練習量也多。作業是需要在懂得前提下認真思考才能寫出來，對訓練思考邏輯很有幫助！  </p>
<blockquote>
<p>相關文章: <a href="https://ritachien.github.io/tags/CS50x-2022/">CS50x(2022)</a>  </p>
</blockquote>
]]></content>
      <categories>
        <category>學習紀錄 - CS50</category>
      </categories>
      <tags>
        <tag>CS50x(2022)</tag>
      </tags>
  </entry>
  <entry>
    <title>404 - 真巧，竟然在這裡遇到你！</title>
    <url>//404.html</url>
    <content><![CDATA[<!-- markdownlint-disable MD039 MD033 -->

<h2 id="這是一個不存在的頁面"><a href="#這是一個不存在的頁面" class="headerlink" title="這是一個不存在的頁面"></a>這是一個不存在的頁面</h2><p>很抱歉，你目前存取的頁面並不存在。</p>
<p>預計將在約 <span id="timeout">5</span> 秒後返回首頁。</p>
<p>如果你很急著想看文章，你可以 <strong><a href="https://ritachien.github.io/">點這裡</a></strong> 返回首頁。</p>
<script>
let countTime = 5;

function count() {
  
  document.getElementById('timeout').textContent = countTime;
  countTime -= 1;
  if(countTime === 0){
    location.href = 'https://ritachien.github.io/'; // 記得改成自己網址 Url
  }
  setTimeout(() => {
    count();
  }, 1000);
}

count();
</script>
]]></content>
  </entry>
  <entry>
    <title>關於我......</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p>最近接觸到了「程式語言」，也因此升起了學習的興趣。為了把自己的學習歷程記錄下來，打算開始寫自己的第一個部落格。</p>
<h2 id="學習筆記"><a href="#學習筆記" class="headerlink" title="學習筆記"></a>學習筆記</h2><p>在學習的過程中，發現自己有時候會因為不夠熟悉，需要重新查詢課程內容或延伸的補充資料，容易東翻翻西找找的浪費時間。所以打算做我的「學習字典」，以後直接依照主題查詢即可。  </p>
<p><i class="fab fa-html5 fa-2x" style="color: tomato; margin-right: 10px;"></i> <span><a href="/posts/927bd0cf/">HTML 筆記目錄</a></sapn><br><i class="fab fa-css3-alt fa-2x" style="color: #3C99DC; margin-right: 16px;"></i><span>CSS 筆記目錄</sapn><br><i class="fab fa-js-square fa-2x" style="color: #FFCF36; margin-right: 12px;"></i><span ><a href="/posts/ab4053d7/">JavaScript 筆記目錄</a></sapn>  </p>
]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
